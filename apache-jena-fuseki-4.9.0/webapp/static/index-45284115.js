import{_ as pn,o as st,k as at,m as W,s as Da,l as Di,L as kc,N as $c,O as Dc,F as Ni,r as lt,n as me,u as At,y as Lt,Q as Nc,R as On,S as Je,U as Na,V as Ic,W as Ia,X as kn,Y as La,Z as Vr,$ as Lc,a0 as Mc,a1 as Fc,b as Bc,a2 as jc,a3 as Uc,a4 as Hc,a5 as qc,T as Wc,a6 as $n,t as wi,a7 as zc,c as Vc,a8 as Gc,E as Qc,G as Kc,a9 as Xc,a as Ma,g as Jc,aa as Yc}from"./queryDataset-2e969cc2.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))o(a);new MutationObserver(a=>{for(const l of a)if(l.type==="childList")for(const u of l.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&o(u)}).observe(document,{childList:!0,subtree:!0});function r(a){const l={};return a.integrity&&(l.integrity=a.integrity),a.referrerPolicy&&(l.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?l.credentials="include":a.crossOrigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function o(a){if(a.ep)return;a.ep=!0;const l=r(a);fetch(a.href,l)}})();let Cs=class{constructor(t,r){this.online=t,this.message=r}};const Zc={name:"ServerStatus",data(){return{serverStatus:null}},computed:{isUp(){return this.serverStatus&&this.serverStatus.online?{success:!0}:{failure:!0}},serverStatusText(){return this.serverStatus?this.serverStatus.message:""}},async created(){this.serverStatus=await this.$fusekiService.getServerStatus(),this.interval=setInterval(async()=>{this.serverStatus=await this.$fusekiService.getServerStatus()},5e3)},beforeUnmount(){clearInterval(this.interval),this.interval=null}},eu=W("span",null,"server status",-1),tu=["title"],nu={id:"status-icon",class:"ms-2"};function ru(n,t,r,o,a,l){return st(),at("div",null,[eu,W("a",{class:"d-inline-block",href:"#","data-bs-toggle":"tooltip",title:l.serverStatusText},[(st(),at("svg",nu,[W("circle",{cx:"1em",cy:"1em",r:"1em",stroke:"transparent","stroke-width":"0",fill:"transparent",class:Da(l.isUp)},null,2)]))],8,tu)])}const iu=pn(Zc,[["render",ru]]),ou="/static/logo-af58c023.svg";Di.add(kc,$c,Dc);const su={name:"Menu",components:{FontAwesomeIcon:Ni,ServerStatus:iu}},au={class:"navbar navbar-expand-md bg-light"},lu={class:"container-fluid mx-2 mx-md-0"},cu=W("img",{alt:"Apache Jena logo",src:ou,style:{width:"52px"}},null,-1),uu=W("button",{class:"navbar-toggler",type:"button","data-bs-toggle":"collapse","data-bs-target":"#navbarNav","aria-controls":"navbarNav","aria-expanded":"false","aria-label":"Toggle navigation"},[W("span",{class:"navbar-toggler-icon"})],-1),fu={class:"collapse navbar-collapse",id:"navbarNav"},du={class:"navbar-nav"},pu={class:"nav-item"},hu={class:"nav-item"},mu={class:"nav-item"},gu={class:"navbar-nav ms-auto"};function yu(n,t,r,o,a,l){const u=lt("router-link"),f=lt("FontAwesomeIcon"),d=lt("ServerStatus");return st(),at("nav",au,[W("div",lu,[me(u,{to:"/",class:"navbar-brand"},{default:At(()=>[cu,Lt(" Apache Jena Fuseki ")]),_:1}),uu,W("div",fu,[W("ul",du,[W("li",pu,[me(u,{to:"/",class:"nav-link","exact-active-class":"active"},{default:At(()=>[me(f,{icon:"database"}),Lt(" datasets ")]),_:1})]),W("li",hu,[me(u,{to:"/manage",class:"nav-link","exact-active-class":"active"},{default:At(()=>[me(f,{icon:"cogs"}),Lt(" manage ")]),_:1})]),W("li",mu,[me(u,{to:"/documentation",class:"nav-link","exact-active-class":"active"},{default:At(()=>[me(f,{icon:"info-circle"}),Lt(" help ")]),_:1})])]),W("ul",gu,[me(d)])])])])}const vu=pn(su,[["render",yu]]);const _u={name:"App",components:{Menu:vu}},bu={id:"app"},wu={class:"container-fluid"},Eu={class:"row"};function Au(n,t,r,o,a,l){const u=lt("Menu"),f=lt("router-view"),d=lt("Toast");return st(),at("div",bu,[W("div",wu,[W("div",Eu,[me(u)]),me(f)]),me(d)])}const Su=pn(_u,[["render",Au]]),Ou="modulepreload",Cu=function(n){return"/"+n},xs={},ft=function(t,r,o){if(!r||r.length===0)return t();const a=document.getElementsByTagName("link");return Promise.all(r.map(l=>{if(l=Cu(l),l in xs)return;xs[l]=!0;const u=l.endsWith(".css"),f=u?'[rel="stylesheet"]':"";if(!!o)for(let h=a.length-1;h>=0;h--){const v=a[h];if(v.href===l&&(!u||v.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${l}"]${f}`))return;const p=document.createElement("link");if(p.rel=u?"stylesheet":Ou,u||(p.as="script",p.crossOrigin=""),p.href=l,document.head.appendChild(p),u)return new Promise((h,v)=>{p.addEventListener("load",h),p.addEventListener("error",()=>v(new Error(`Unable to preload CSS for ${l}`)))})})).then(()=>t())};/*!
  * vue-router v4.2.2
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */const nn=typeof window<"u";function xu(n){return n.__esModule||n[Symbol.toStringTag]==="Module"}const ee=Object.assign;function Gr(n,t){const r={};for(const o in t){const a=t[o];r[o]=Ye(a)?a.map(n):n(a)}return r}const Cn=()=>{},Ye=Array.isArray,Tu=/\/$/,Pu=n=>n.replace(Tu,"");function Qr(n,t,r="/"){let o,a={},l="",u="";const f=t.indexOf("#");let d=t.indexOf("?");return f<d&&f>=0&&(d=-1),d>-1&&(o=t.slice(0,d),l=t.slice(d+1,f>-1?f:t.length),a=n(l)),f>-1&&(o=o||t.slice(0,f),u=t.slice(f,t.length)),o=Du(o??t,r),{fullPath:o+(l&&"?")+l+u,path:o,query:a,hash:u}}function Ru(n,t){const r=t.query?n(t.query):"";return t.path+(r&&"?")+r+(t.hash||"")}function Ts(n,t){return!t||!n.toLowerCase().startsWith(t.toLowerCase())?n:n.slice(t.length)||"/"}function ku(n,t,r){const o=t.matched.length-1,a=r.matched.length-1;return o>-1&&o===a&&sn(t.matched[o],r.matched[a])&&Fa(t.params,r.params)&&n(t.query)===n(r.query)&&t.hash===r.hash}function sn(n,t){return(n.aliasOf||n)===(t.aliasOf||t)}function Fa(n,t){if(Object.keys(n).length!==Object.keys(t).length)return!1;for(const r in n)if(!$u(n[r],t[r]))return!1;return!0}function $u(n,t){return Ye(n)?Ps(n,t):Ye(t)?Ps(t,n):n===t}function Ps(n,t){return Ye(t)?n.length===t.length&&n.every((r,o)=>r===t[o]):n.length===1&&n[0]===t}function Du(n,t){if(n.startsWith("/"))return n;if(!n)return t;const r=t.split("/"),o=n.split("/"),a=o[o.length-1];(a===".."||a===".")&&o.push("");let l=r.length-1,u,f;for(u=0;u<o.length;u++)if(f=o[u],f!==".")if(f==="..")l>1&&l--;else break;return r.slice(0,l).join("/")+"/"+o.slice(u-(u===o.length?1:0)).join("/")}var Dn;(function(n){n.pop="pop",n.push="push"})(Dn||(Dn={}));var xn;(function(n){n.back="back",n.forward="forward",n.unknown=""})(xn||(xn={}));function Nu(n){if(!n)if(nn){const t=document.querySelector("base");n=t&&t.getAttribute("href")||"/",n=n.replace(/^\w+:\/\/[^\/]+/,"")}else n="/";return n[0]!=="/"&&n[0]!=="#"&&(n="/"+n),Pu(n)}const Iu=/^[^#]+#/;function Lu(n,t){return n.replace(Iu,"#")+t}function Mu(n,t){const r=document.documentElement.getBoundingClientRect(),o=n.getBoundingClientRect();return{behavior:t.behavior,left:o.left-r.left-(t.left||0),top:o.top-r.top-(t.top||0)}}const pr=()=>({left:window.pageXOffset,top:window.pageYOffset});function Fu(n){let t;if("el"in n){const r=n.el,o=typeof r=="string"&&r.startsWith("#"),a=typeof r=="string"?o?document.getElementById(r.slice(1)):document.querySelector(r):r;if(!a)return;t=Mu(a,n)}else t=n;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.pageXOffset,t.top!=null?t.top:window.pageYOffset)}function Rs(n,t){return(history.state?history.state.position-t:-1)+n}const Ei=new Map;function Bu(n,t){Ei.set(n,t)}function ju(n){const t=Ei.get(n);return Ei.delete(n),t}let Uu=()=>location.protocol+"//"+location.host;function Ba(n,t){const{pathname:r,search:o,hash:a}=t,l=n.indexOf("#");if(l>-1){let f=a.includes(n.slice(l))?n.slice(l).length:1,d=a.slice(f);return d[0]!=="/"&&(d="/"+d),Ts(d,"")}return Ts(r,n)+o+a}function Hu(n,t,r,o){let a=[],l=[],u=null;const f=({state:g})=>{const S=Ba(n,location),P=r.value,M=t.value;let I=0;if(g){if(r.value=S,t.value=g,u&&u===P){u=null;return}I=M?g.position-M.position:0}else o(S);a.forEach(O=>{O(r.value,P,{delta:I,type:Dn.pop,direction:I?I>0?xn.forward:xn.back:xn.unknown})})};function d(){u=r.value}function p(g){a.push(g);const S=()=>{const P=a.indexOf(g);P>-1&&a.splice(P,1)};return l.push(S),S}function h(){const{history:g}=window;g.state&&g.replaceState(ee({},g.state,{scroll:pr()}),"")}function v(){for(const g of l)g();l=[],window.removeEventListener("popstate",f),window.removeEventListener("beforeunload",h)}return window.addEventListener("popstate",f),window.addEventListener("beforeunload",h,{passive:!0}),{pauseListeners:d,listen:p,destroy:v}}function ks(n,t,r,o=!1,a=!1){return{back:n,current:t,forward:r,replaced:o,position:window.history.length,scroll:a?pr():null}}function qu(n){const{history:t,location:r}=window,o={value:Ba(n,r)},a={value:t.state};a.value||l(o.value,{back:null,current:o.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function l(d,p,h){const v=n.indexOf("#"),g=v>-1?(r.host&&document.querySelector("base")?n:n.slice(v))+d:Uu()+n+d;try{t[h?"replaceState":"pushState"](p,"",g),a.value=p}catch(S){console.error(S),r[h?"replace":"assign"](g)}}function u(d,p){const h=ee({},t.state,ks(a.value.back,d,a.value.forward,!0),p,{position:a.value.position});l(d,h,!0),o.value=d}function f(d,p){const h=ee({},a.value,t.state,{forward:d,scroll:pr()});l(h.current,h,!0);const v=ee({},ks(o.value,d,null),{position:h.position+1},p);l(d,v,!1),o.value=d}return{location:o,state:a,push:f,replace:u}}function Wu(n){n=Nu(n);const t=qu(n),r=Hu(n,t.state,t.location,t.replace);function o(l,u=!0){u||r.pauseListeners(),history.go(l)}const a=ee({location:"",base:n,go:o,createHref:Lu.bind(null,n)},t,r);return Object.defineProperty(a,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(a,"state",{enumerable:!0,get:()=>t.state.value}),a}function zu(n){return n=location.host?n||location.pathname+location.search:"",n.includes("#")||(n+="#"),Wu(n)}function Vu(n){return typeof n=="string"||n&&typeof n=="object"}function ja(n){return typeof n=="string"||typeof n=="symbol"}const _t={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},Ua=Symbol("");var $s;(function(n){n[n.aborted=4]="aborted",n[n.cancelled=8]="cancelled",n[n.duplicated=16]="duplicated"})($s||($s={}));function an(n,t){return ee(new Error,{type:n,[Ua]:!0},t)}function dt(n,t){return n instanceof Error&&Ua in n&&(t==null||!!(n.type&t))}const Ds="[^/]+?",Gu={sensitive:!1,strict:!1,start:!0,end:!0},Qu=/[.+*?^${}()[\]/\\]/g;function Ku(n,t){const r=ee({},Gu,t),o=[];let a=r.start?"^":"";const l=[];for(const p of n){const h=p.length?[]:[90];r.strict&&!p.length&&(a+="/");for(let v=0;v<p.length;v++){const g=p[v];let S=40+(r.sensitive?.25:0);if(g.type===0)v||(a+="/"),a+=g.value.replace(Qu,"\\$&"),S+=40;else if(g.type===1){const{value:P,repeatable:M,optional:I,regexp:O}=g;l.push({name:P,repeatable:M,optional:I});const $=O||Ds;if($!==Ds){S+=10;try{new RegExp(`(${$})`)}catch(se){throw new Error(`Invalid custom RegExp for param "${P}" (${$}): `+se.message)}}let K=M?`((?:${$})(?:/(?:${$}))*)`:`(${$})`;v||(K=I&&p.length<2?`(?:/${K})`:"/"+K),I&&(K+="?"),a+=K,S+=20,I&&(S+=-8),M&&(S+=-20),$===".*"&&(S+=-50)}h.push(S)}o.push(h)}if(r.strict&&r.end){const p=o.length-1;o[p][o[p].length-1]+=.7000000000000001}r.strict||(a+="/?"),r.end?a+="$":r.strict&&(a+="(?:/|$)");const u=new RegExp(a,r.sensitive?"":"i");function f(p){const h=p.match(u),v={};if(!h)return null;for(let g=1;g<h.length;g++){const S=h[g]||"",P=l[g-1];v[P.name]=S&&P.repeatable?S.split("/"):S}return v}function d(p){let h="",v=!1;for(const g of n){(!v||!h.endsWith("/"))&&(h+="/"),v=!1;for(const S of g)if(S.type===0)h+=S.value;else if(S.type===1){const{value:P,repeatable:M,optional:I}=S,O=P in p?p[P]:"";if(Ye(O)&&!M)throw new Error(`Provided param "${P}" is an array but it is not repeatable (* or + modifiers)`);const $=Ye(O)?O.join("/"):O;if(!$)if(I)g.length<2&&(h.endsWith("/")?h=h.slice(0,-1):v=!0);else throw new Error(`Missing required param "${P}"`);h+=$}}return h||"/"}return{re:u,score:o,keys:l,parse:f,stringify:d}}function Xu(n,t){let r=0;for(;r<n.length&&r<t.length;){const o=t[r]-n[r];if(o)return o;r++}return n.length<t.length?n.length===1&&n[0]===40+40?-1:1:n.length>t.length?t.length===1&&t[0]===40+40?1:-1:0}function Ju(n,t){let r=0;const o=n.score,a=t.score;for(;r<o.length&&r<a.length;){const l=Xu(o[r],a[r]);if(l)return l;r++}if(Math.abs(a.length-o.length)===1){if(Ns(o))return 1;if(Ns(a))return-1}return a.length-o.length}function Ns(n){const t=n[n.length-1];return n.length>0&&t[t.length-1]<0}const Yu={type:0,value:""},Zu=/[a-zA-Z0-9_]/;function ef(n){if(!n)return[[]];if(n==="/")return[[Yu]];if(!n.startsWith("/"))throw new Error(`Invalid path "${n}"`);function t(S){throw new Error(`ERR (${r})/"${p}": ${S}`)}let r=0,o=r;const a=[];let l;function u(){l&&a.push(l),l=[]}let f=0,d,p="",h="";function v(){p&&(r===0?l.push({type:0,value:p}):r===1||r===2||r===3?(l.length>1&&(d==="*"||d==="+")&&t(`A repeatable param (${p}) must be alone in its segment. eg: '/:ids+.`),l.push({type:1,value:p,regexp:h,repeatable:d==="*"||d==="+",optional:d==="*"||d==="?"})):t("Invalid state to consume buffer"),p="")}function g(){p+=d}for(;f<n.length;){if(d=n[f++],d==="\\"&&r!==2){o=r,r=4;continue}switch(r){case 0:d==="/"?(p&&v(),u()):d===":"?(v(),r=1):g();break;case 4:g(),r=o;break;case 1:d==="("?r=2:Zu.test(d)?g():(v(),r=0,d!=="*"&&d!=="?"&&d!=="+"&&f--);break;case 2:d===")"?h[h.length-1]=="\\"?h=h.slice(0,-1)+d:r=3:h+=d;break;case 3:v(),r=0,d!=="*"&&d!=="?"&&d!=="+"&&f--,h="";break;default:t("Unknown state");break}}return r===2&&t(`Unfinished custom RegExp for param "${p}"`),v(),u(),a}function tf(n,t,r){const o=Ku(ef(n.path),r),a=ee(o,{record:n,parent:t,children:[],alias:[]});return t&&!a.record.aliasOf==!t.record.aliasOf&&t.children.push(a),a}function nf(n,t){const r=[],o=new Map;t=Ms({strict:!1,end:!0,sensitive:!1},t);function a(h){return o.get(h)}function l(h,v,g){const S=!g,P=rf(h);P.aliasOf=g&&g.record;const M=Ms(t,h),I=[P];if("alias"in h){const K=typeof h.alias=="string"?[h.alias]:h.alias;for(const se of K)I.push(ee({},P,{components:g?g.record.components:P.components,path:se,aliasOf:g?g.record:P}))}let O,$;for(const K of I){const{path:se}=K;if(v&&se[0]!=="/"){const D=v.record.path,he=D[D.length-1]==="/"?"":"/";K.path=v.record.path+(se&&he+se)}if(O=tf(K,v,M),g?g.alias.push(O):($=$||O,$!==O&&$.alias.push(O),S&&h.name&&!Ls(O)&&u(h.name)),P.children){const D=P.children;for(let he=0;he<D.length;he++)l(D[he],O,g&&g.children[he])}g=g||O,(O.record.components&&Object.keys(O.record.components).length||O.record.name||O.record.redirect)&&d(O)}return $?()=>{u($)}:Cn}function u(h){if(ja(h)){const v=o.get(h);v&&(o.delete(h),r.splice(r.indexOf(v),1),v.children.forEach(u),v.alias.forEach(u))}else{const v=r.indexOf(h);v>-1&&(r.splice(v,1),h.record.name&&o.delete(h.record.name),h.children.forEach(u),h.alias.forEach(u))}}function f(){return r}function d(h){let v=0;for(;v<r.length&&Ju(h,r[v])>=0&&(h.record.path!==r[v].record.path||!Ha(h,r[v]));)v++;r.splice(v,0,h),h.record.name&&!Ls(h)&&o.set(h.record.name,h)}function p(h,v){let g,S={},P,M;if("name"in h&&h.name){if(g=o.get(h.name),!g)throw an(1,{location:h});M=g.record.name,S=ee(Is(v.params,g.keys.filter($=>!$.optional).map($=>$.name)),h.params&&Is(h.params,g.keys.map($=>$.name))),P=g.stringify(S)}else if("path"in h)P=h.path,g=r.find($=>$.re.test(P)),g&&(S=g.parse(P),M=g.record.name);else{if(g=v.name?o.get(v.name):r.find($=>$.re.test(v.path)),!g)throw an(1,{location:h,currentLocation:v});M=g.record.name,S=ee({},v.params,h.params),P=g.stringify(S)}const I=[];let O=g;for(;O;)I.unshift(O.record),O=O.parent;return{name:M,path:P,params:S,matched:I,meta:sf(I)}}return n.forEach(h=>l(h)),{addRoute:l,resolve:p,removeRoute:u,getRoutes:f,getRecordMatcher:a}}function Is(n,t){const r={};for(const o of t)o in n&&(r[o]=n[o]);return r}function rf(n){return{path:n.path,redirect:n.redirect,name:n.name,meta:n.meta||{},aliasOf:void 0,beforeEnter:n.beforeEnter,props:of(n),children:n.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in n?n.components||null:n.component&&{default:n.component}}}function of(n){const t={},r=n.props||!1;if("component"in n)t.default=r;else for(const o in n.components)t[o]=typeof r=="boolean"?r:r[o];return t}function Ls(n){for(;n;){if(n.record.aliasOf)return!0;n=n.parent}return!1}function sf(n){return n.reduce((t,r)=>ee(t,r.meta),{})}function Ms(n,t){const r={};for(const o in n)r[o]=o in t?t[o]:n[o];return r}function Ha(n,t){return t.children.some(r=>r===n||Ha(n,r))}const qa=/#/g,af=/&/g,lf=/\//g,cf=/=/g,uf=/\?/g,Wa=/\+/g,ff=/%5B/g,df=/%5D/g,za=/%5E/g,pf=/%60/g,Va=/%7B/g,hf=/%7C/g,Ga=/%7D/g,mf=/%20/g;function Ii(n){return encodeURI(""+n).replace(hf,"|").replace(ff,"[").replace(df,"]")}function gf(n){return Ii(n).replace(Va,"{").replace(Ga,"}").replace(za,"^")}function Ai(n){return Ii(n).replace(Wa,"%2B").replace(mf,"+").replace(qa,"%23").replace(af,"%26").replace(pf,"`").replace(Va,"{").replace(Ga,"}").replace(za,"^")}function yf(n){return Ai(n).replace(cf,"%3D")}function vf(n){return Ii(n).replace(qa,"%23").replace(uf,"%3F")}function _f(n){return n==null?"":vf(n).replace(lf,"%2F")}function ar(n){try{return decodeURIComponent(""+n)}catch{}return""+n}function bf(n){const t={};if(n===""||n==="?")return t;const o=(n[0]==="?"?n.slice(1):n).split("&");for(let a=0;a<o.length;++a){const l=o[a].replace(Wa," "),u=l.indexOf("="),f=ar(u<0?l:l.slice(0,u)),d=u<0?null:ar(l.slice(u+1));if(f in t){let p=t[f];Ye(p)||(p=t[f]=[p]),p.push(d)}else t[f]=d}return t}function Fs(n){let t="";for(let r in n){const o=n[r];if(r=yf(r),o==null){o!==void 0&&(t+=(t.length?"&":"")+r);continue}(Ye(o)?o.map(l=>l&&Ai(l)):[o&&Ai(o)]).forEach(l=>{l!==void 0&&(t+=(t.length?"&":"")+r,l!=null&&(t+="="+l))})}return t}function wf(n){const t={};for(const r in n){const o=n[r];o!==void 0&&(t[r]=Ye(o)?o.map(a=>a==null?null:""+a):o==null?o:""+o)}return t}const Ef=Symbol(""),Bs=Symbol(""),Li=Symbol(""),Qa=Symbol(""),Si=Symbol("");function An(){let n=[];function t(o){return n.push(o),()=>{const a=n.indexOf(o);a>-1&&n.splice(a,1)}}function r(){n=[]}return{add:t,list:()=>n,reset:r}}function bt(n,t,r,o,a){const l=o&&(o.enterCallbacks[a]=o.enterCallbacks[a]||[]);return()=>new Promise((u,f)=>{const d=v=>{v===!1?f(an(4,{from:r,to:t})):v instanceof Error?f(v):Vu(v)?f(an(2,{from:t,to:v})):(l&&o.enterCallbacks[a]===l&&typeof v=="function"&&l.push(v),u())},p=n.call(o&&o.instances[a],t,r,d);let h=Promise.resolve(p);n.length<3&&(h=h.then(d)),h.catch(v=>f(v))})}function Kr(n,t,r,o){const a=[];for(const l of n)for(const u in l.components){let f=l.components[u];if(!(t!=="beforeRouteEnter"&&!l.instances[u]))if(Af(f)){const p=(f.__vccOpts||f)[t];p&&a.push(bt(p,r,o,l,u))}else{let d=f();a.push(()=>d.then(p=>{if(!p)return Promise.reject(new Error(`Couldn't resolve component "${u}" at "${l.path}"`));const h=xu(p)?p.default:p;l.components[u]=h;const g=(h.__vccOpts||h)[t];return g&&bt(g,r,o,l,u)()}))}}return a}function Af(n){return typeof n=="object"||"displayName"in n||"props"in n||"__vccOpts"in n}function js(n){const t=kn(Li),r=kn(Qa),o=Je(()=>t.resolve(On(n.to))),a=Je(()=>{const{matched:d}=o.value,{length:p}=d,h=d[p-1],v=r.matched;if(!h||!v.length)return-1;const g=v.findIndex(sn.bind(null,h));if(g>-1)return g;const S=Us(d[p-2]);return p>1&&Us(h)===S&&v[v.length-1].path!==S?v.findIndex(sn.bind(null,d[p-2])):g}),l=Je(()=>a.value>-1&&xf(r.params,o.value.params)),u=Je(()=>a.value>-1&&a.value===r.matched.length-1&&Fa(r.params,o.value.params));function f(d={}){return Cf(d)?t[On(n.replace)?"replace":"push"](On(n.to)).catch(Cn):Promise.resolve()}return{route:o,href:Je(()=>o.value.href),isActive:l,isExactActive:u,navigate:f}}const Sf=Ia({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:js,setup(n,{slots:t}){const r=Na(js(n)),{options:o}=kn(Li),a=Je(()=>({[Hs(n.activeClass,o.linkActiveClass,"router-link-active")]:r.isActive,[Hs(n.exactActiveClass,o.linkExactActiveClass,"router-link-exact-active")]:r.isExactActive}));return()=>{const l=t.default&&t.default(r);return n.custom?l:La("a",{"aria-current":r.isExactActive?n.ariaCurrentValue:null,href:r.href,onClick:r.navigate,class:a.value},l)}}}),Of=Sf;function Cf(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey)&&!n.defaultPrevented&&!(n.button!==void 0&&n.button!==0)){if(n.currentTarget&&n.currentTarget.getAttribute){const t=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return n.preventDefault&&n.preventDefault(),!0}}function xf(n,t){for(const r in t){const o=t[r],a=n[r];if(typeof o=="string"){if(o!==a)return!1}else if(!Ye(a)||a.length!==o.length||o.some((l,u)=>l!==a[u]))return!1}return!0}function Us(n){return n?n.aliasOf?n.aliasOf.path:n.path:""}const Hs=(n,t,r)=>n??t??r,Tf=Ia({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(n,{attrs:t,slots:r}){const o=kn(Si),a=Je(()=>n.route||o.value),l=kn(Bs,0),u=Je(()=>{let p=On(l);const{matched:h}=a.value;let v;for(;(v=h[p])&&!v.components;)p++;return p}),f=Je(()=>a.value.matched[u.value]);Vr(Bs,Je(()=>u.value+1)),Vr(Ef,f),Vr(Si,a);const d=Lc();return Mc(()=>[d.value,f.value,n.name],([p,h,v],[g,S,P])=>{h&&(h.instances[v]=p,S&&S!==h&&p&&p===g&&(h.leaveGuards.size||(h.leaveGuards=S.leaveGuards),h.updateGuards.size||(h.updateGuards=S.updateGuards))),p&&h&&(!S||!sn(h,S)||!g)&&(h.enterCallbacks[v]||[]).forEach(M=>M(p))},{flush:"post"}),()=>{const p=a.value,h=n.name,v=f.value,g=v&&v.components[h];if(!g)return qs(r.default,{Component:g,route:p});const S=v.props[h],P=S?S===!0?p.params:typeof S=="function"?S(p):S:null,I=La(g,ee({},P,t,{onVnodeUnmounted:O=>{O.component.isUnmounted&&(v.instances[h]=null)},ref:d}));return qs(r.default,{Component:I,route:p})||I}}});function qs(n,t){if(!n)return null;const r=n(t);return r.length===1?r[0]:r}const Pf=Tf;function Rf(n){const t=nf(n.routes,n),r=n.parseQuery||bf,o=n.stringifyQuery||Fs,a=n.history,l=An(),u=An(),f=An(),d=Nc(_t);let p=_t;nn&&n.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const h=Gr.bind(null,w=>""+w),v=Gr.bind(null,_f),g=Gr.bind(null,ar);function S(w,b){let x,N;return ja(w)?(x=t.getRecordMatcher(w),N=b):N=w,t.addRoute(N,x)}function P(w){const b=t.getRecordMatcher(w);b&&t.removeRoute(b)}function M(){return t.getRoutes().map(w=>w.record)}function I(w){return!!t.getRecordMatcher(w)}function O(w,b){if(b=ee({},b||d.value),typeof w=="string"){const U=Qr(r,w,b.path),ce=t.resolve({path:U.path},b),Ge=a.createHref(U.fullPath);return ee(U,ce,{params:g(ce.params),hash:ar(U.hash),redirectedFrom:void 0,href:Ge})}let x;if("path"in w)x=ee({},w,{path:Qr(r,w.path,b.path).path});else{const U=ee({},w.params);for(const ce in U)U[ce]==null&&delete U[ce];x=ee({},w,{params:v(U)}),b.params=v(b.params)}const N=t.resolve(x,b),J=w.hash||"";N.params=h(g(N.params));const ae=Ru(o,ee({},w,{hash:gf(J),path:N.path})),V=a.createHref(ae);return ee({fullPath:ae,hash:J,query:o===Fs?wf(w.query):w.query||{}},N,{redirectedFrom:void 0,href:V})}function $(w){return typeof w=="string"?Qr(r,w,d.value.path):ee({},w)}function K(w,b){if(p!==w)return an(8,{from:b,to:w})}function se(w){return Ee(w)}function D(w){return se(ee($(w),{replace:!0}))}function he(w){const b=w.matched[w.matched.length-1];if(b&&b.redirect){const{redirect:x}=b;let N=typeof x=="function"?x(w):x;return typeof N=="string"&&(N=N.includes("?")||N.includes("#")?N=$(N):{path:N},N.params={}),ee({query:w.query,hash:w.hash,params:"path"in N?{}:w.params},N)}}function Ee(w,b){const x=p=O(w),N=d.value,J=w.state,ae=w.force,V=w.replace===!0,U=he(x);if(U)return Ee(ee($(U),{state:typeof U=="object"?ee({},J,U.state):J,force:ae,replace:V}),b||x);const ce=x;ce.redirectedFrom=b;let Ge;return!ae&&ku(o,N,x)&&(Ge=an(16,{to:ce,from:N}),jt(N,N,!0,!1)),(Ge?Promise.resolve(Ge):Pe(ce,N)).catch(de=>dt(de)?dt(de,2)?de:A(de):ht(de,ce,N)).then(de=>{if(de){if(dt(de,2))return Ee(ee({replace:V},$(de.to),{state:typeof de.to=="object"?ee({},J,de.to.state):J,force:ae}),b||ce)}else de=le(ce,N,!0,V,J);return Ce(ce,N,de),de})}function Te(w,b){const x=K(w,b);return x?Promise.reject(x):Promise.resolve()}function Ae(w){const b=Ie.values().next().value;return b&&typeof b.runWithContext=="function"?b.runWithContext(w):w()}function Pe(w,b){let x;const[N,J,ae]=kf(w,b);x=Kr(N.reverse(),"beforeRouteLeave",w,b);for(const U of N)U.leaveGuards.forEach(ce=>{x.push(bt(ce,w,b))});const V=Te.bind(null,w,b);return x.push(V),ye(x).then(()=>{x=[];for(const U of l.list())x.push(bt(U,w,b));return x.push(V),ye(x)}).then(()=>{x=Kr(J,"beforeRouteUpdate",w,b);for(const U of J)U.updateGuards.forEach(ce=>{x.push(bt(ce,w,b))});return x.push(V),ye(x)}).then(()=>{x=[];for(const U of w.matched)if(U.beforeEnter&&!b.matched.includes(U))if(Ye(U.beforeEnter))for(const ce of U.beforeEnter)x.push(bt(ce,w,b));else x.push(bt(U.beforeEnter,w,b));return x.push(V),ye(x)}).then(()=>(w.matched.forEach(U=>U.enterCallbacks={}),x=Kr(ae,"beforeRouteEnter",w,b),x.push(V),ye(x))).then(()=>{x=[];for(const U of u.list())x.push(bt(U,w,b));return x.push(V),ye(x)}).catch(U=>dt(U,8)?U:Promise.reject(U))}function Ce(w,b,x){for(const N of f.list())Ae(()=>N(w,b,x))}function le(w,b,x,N,J){const ae=K(w,b);if(ae)return ae;const V=b===_t,U=nn?history.state:{};x&&(N||V?a.replace(w.fullPath,ee({scroll:V&&U&&U.scroll},J)):a.push(w.fullPath,J)),d.value=w,jt(w,b,x,V),A()}let ie;function fe(){ie||(ie=a.listen((w,b,x)=>{if(!gt.listening)return;const N=O(w),J=he(N);if(J){Ee(ee(J,{replace:!0}),N).catch(Cn);return}p=N;const ae=d.value;nn&&Bu(Rs(ae.fullPath,x.delta),pr()),Pe(N,ae).catch(V=>dt(V,12)?V:dt(V,2)?(Ee(V.to,N).then(U=>{dt(U,20)&&!x.delta&&x.type===Dn.pop&&a.go(-1,!1)}).catch(Cn),Promise.reject()):(x.delta&&a.go(-x.delta,!1),ht(V,N,ae))).then(V=>{V=V||le(N,ae,!1),V&&(x.delta&&!dt(V,8)?a.go(-x.delta,!1):x.type===Dn.pop&&dt(V,20)&&a.go(-1,!1)),Ce(N,ae,V)}).catch(Cn)}))}let ge=An(),Re=An(),Ze;function ht(w,b,x){A(w);const N=Re.list();return N.length?N.forEach(J=>J(w,b,x)):console.error(w),Promise.reject(w)}function mt(){return Ze&&d.value!==_t?Promise.resolve():new Promise((w,b)=>{ge.add([w,b])})}function A(w){return Ze||(Ze=!w,fe(),ge.list().forEach(([b,x])=>w?x(w):b()),ge.reset()),w}function jt(w,b,x,N){const{scrollBehavior:J}=n;if(!nn||!J)return Promise.resolve();const ae=!x&&ju(Rs(w.fullPath,0))||(N||!x)&&history.state&&history.state.scroll||null;return Ic().then(()=>J(w,b,ae)).then(V=>V&&Fu(V)).catch(V=>ht(V,w,b))}const Ut=w=>a.go(w);let Ct;const Ie=new Set,gt={currentRoute:d,listening:!0,addRoute:S,removeRoute:P,hasRoute:I,getRoutes:M,resolve:O,options:n,push:se,replace:D,go:Ut,back:()=>Ut(-1),forward:()=>Ut(1),beforeEach:l.add,beforeResolve:u.add,afterEach:f.add,onError:Re.add,isReady:mt,install(w){const b=this;w.component("RouterLink",Of),w.component("RouterView",Pf),w.config.globalProperties.$router=b,Object.defineProperty(w.config.globalProperties,"$route",{enumerable:!0,get:()=>On(d)}),nn&&!Ct&&d.value===_t&&(Ct=!0,se(a.location).catch(J=>{}));const x={};for(const J in _t)x[J]=Je(()=>d.value[J]);w.provide(Li,b),w.provide(Qa,Na(x)),w.provide(Si,d);const N=w.unmount;Ie.add(w),w.unmount=function(){Ie.delete(w),Ie.size<1&&(p=_t,ie&&ie(),ie=null,d.value=_t,Ct=!1,Ze=!1),N()}}};function ye(w){return w.reduce((b,x)=>b.then(()=>Ae(x)),Promise.resolve())}return gt}function kf(n,t){const r=[],o=[],a=[],l=Math.max(t.matched.length,n.matched.length);for(let u=0;u<l;u++){const f=t.matched[u];f&&(n.matched.find(p=>sn(p,f))?o.push(f):r.push(f));const d=n.matched[u];d&&(t.matched.find(p=>sn(p,d))||a.push(d))}return[r,o,a]}Di.add(Fc,Bc,jc,Uc);const $f={name:"Home",mixins:[Hc],...qc,components:{"table-listing":Wc,FontAwesomeIcon:Ni},beforeRouteEnter(n,t,r){r(async o=>{await o.initializeData(),$n.on("connection:reset",o.initializeData)})},async beforeRouteUpdate(n,t,r){this.initializeData(),r()},beforeRouteLeave(n,t,r){this.serverData=null,$n.off("connection:reset"),r()},computed:{headerString(){return this.serverData?`Version ${this.serverData.version}. Uptime ${this.convertUptime(this.serverData.uptime)}`:""}},methods:{convertUptime(n){const t=n%60,r=Math.floor(n/60%60),o=Math.floor(n/(60*60)%24),a=Math.floor(n/(60*60*24));return`${a>0?a+"d":""} ${o>0?o+"h":""} ${r}m ${t<9?"0"+t:t}s`}}},Df={class:"container-fluid"},Nf={class:"row mt-4"},If={class:"col-12"},Lf=W("h2",{class:"text-center"}," Apache Jena Fuseki ",-1),Mf={class:"text-center"},Ff={class:"badge text-bg-secondary"},Bf=["onClick"],jf=W("span",{class:"ms-1"},"query",-1),Uf=["onClick"],Hf=W("span",{class:"ms-1"},"add data",-1),qf=["onClick"],Wf=W("span",{class:"ms-1"},"edit",-1),zf=["onClick"],Vf=W("span",{class:"ms-1"},"info",-1);function Gf(n,t,r,o,a,l){const u=lt("router-link"),f=lt("FontAwesomeIcon"),d=lt("table-listing");return st(),at("div",Df,[W("div",Nf,[W("div",If,[Lf,W("div",Mf,[W("span",Ff,wi(l.headerString),1)])])]),me(d,{fields:n.fields,items:n.items,"is-busy":n.isBusy},{empty:At(()=>[W("h4",null,[Lt(" No datasets created - "),me(u,{to:"/manage/new"},{default:At(()=>[Lt(" add one ")]),_:1})])]),"cell(actions)":At(p=>[W("button",{onClick:h=>n.$router.push(`/dataset${p.item.name}/query`),type:"button",class:"btn btn-primary me-0 me-md-2 mb-2 mb-md-0 d-block d-md-inline-block"},[me(f,{icon:"question-circle"}),jf],8,Bf),W("button",{onClick:h=>n.$router.push(`/dataset${p.item.name}/upload`),type:"button",class:"btn btn-primary me-0 me-md-2 mb-2 mb-md-0 d-block d-md-inline-block"},[me(f,{icon:"upload"}),Hf],8,Uf),W("button",{onClick:h=>n.$router.push(`/dataset${p.item.name}/edit`),type:"button",class:"btn btn-primary me-0 me-md-2 mb-2 mb-md-0 d-block d-md-inline-block"},[me(f,{icon:"edit"}),Wf],8,qf),W("button",{onClick:h=>n.$router.push(`/dataset${p.item.name}/info`),type:"button",class:"btn btn-primary me-0 mb-md-0 d-block d-md-inline-block"},[me(f,{icon:"tachometer-alt"}),Vf],8,zf)]),_:1},8,["fields","items","is-busy"])])}const Qf=pn($f,[["render",Gf]]);Di.add(zc);const Kf={name:"NotFound",components:{FontAwesomeIcon:Ni}},Xf={class:"container-fluid"},Jf={class:"row mt-2"},Yf={class:"col-12"},Zf={class:"jumbotron"},ed=W("h1",{class:"display-4"}," 404 Page Not Found ",-1),td={class:"lead"};function nd(n,t,r,o,a,l){const u=lt("FontAwesomeIcon");return st(),at("div",Xf,[W("div",Jf,[W("div",Yf,[W("div",Zf,[ed,W("p",td,[W("button",{type:"button",class:"btn btn-primary",onClick:t[0]||(t[0]=f=>n.$router.push("/"))},[me(u,{icon:"arrow-left"}),Lt(" Back to Home ")])])])])])])}const rd=pn(Kf,[["render",nd]]),id=[{path:"/",name:"Home",component:Qf},{path:"/dataset/:datasetName/query",name:"DatasetQuery",component:()=>ft(()=>import("./queryDataset-2e969cc2.js").then(n=>n.ab),["static/queryDataset-2e969cc2.js","static/queryDataset-1d1b1a14.css"]),props:!0},{path:"/dataset/:datasetName/query*",name:"DatasetQueryParameters",component:()=>ft(()=>import("./queryDataset-2e969cc2.js").then(n=>n.ab),["static/queryDataset-2e969cc2.js","static/queryDataset-1d1b1a14.css"]),props:!0},{path:"/dataset/:datasetName/upload",name:"DatasetUpload",component:()=>ft(()=>import("./manageDataset-75bbbdef.js").then(n=>n.U),["static/manageDataset-75bbbdef.js","static/queryDataset-2e969cc2.js","static/queryDataset-1d1b1a14.css","static/manageDataset-5d0f417c.css"]),props:!0},{path:"/dataset/:datasetName/edit",name:"DatasetEdit",component:()=>ft(()=>import("./manageDataset-75bbbdef.js").then(n=>n.E),["static/manageDataset-75bbbdef.js","static/queryDataset-2e969cc2.js","static/queryDataset-1d1b1a14.css","static/manageDataset-5d0f417c.css"]),props:!0},{path:"/dataset/:datasetName/info",name:"DatasetInfo",component:()=>ft(()=>import("./manageDataset-75bbbdef.js").then(n=>n.I),["static/manageDataset-75bbbdef.js","static/queryDataset-2e969cc2.js","static/queryDataset-1d1b1a14.css","static/manageDataset-5d0f417c.css"]),props:!0},{path:"/manage",name:"ManageDatasets",component:()=>ft(()=>import("./queryDataset-2e969cc2.js").then(n=>n.ac),["static/queryDataset-2e969cc2.js","static/queryDataset-1d1b1a14.css"])},{path:"/manage/new",name:"NewDataset",component:()=>ft(()=>import("./manageDataset-75bbbdef.js").then(n=>n.N),["static/manageDataset-75bbbdef.js","static/queryDataset-2e969cc2.js","static/queryDataset-1d1b1a14.css","static/manageDataset-5d0f417c.css"])},{path:"/manage/tasks",name:"Tasks",component:()=>ft(()=>import("./other-14333a8e.js").then(n=>n.T),["static/other-14333a8e.js","static/queryDataset-2e969cc2.js","static/queryDataset-1d1b1a14.css"])},{path:"/documentation",name:"Help",component:()=>ft(()=>import("./other-14333a8e.js").then(n=>n.H),["static/other-14333a8e.js","static/queryDataset-2e969cc2.js","static/queryDataset-1d1b1a14.css"])},{path:"/:pathMatch(.*)*",name:"Not Found",component:rd}],od=Rf({routes:id,history:zu()});var sd={exports:{}};/*!
  * Bootstrap v5.3.0 (https://getbootstrap.com/)
  * Copyright 2011-2023 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */(function(n,t){(function(r,o){n.exports=o()})(Vc,function(){const r=new Map,o={set(s,e,i){r.has(s)||r.set(s,new Map);const c=r.get(s);c.has(e)||c.size===0?c.set(e,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(c.keys())[0]}.`)},get:(s,e)=>r.has(s)&&r.get(s).get(e)||null,remove(s,e){if(!r.has(s))return;const i=r.get(s);i.delete(e),i.size===0&&r.delete(s)}},a="transitionend",l=s=>(s&&window.CSS&&window.CSS.escape&&(s=s.replace(/#([^\s"#']+)/g,(e,i)=>`#${CSS.escape(i)}`)),s),u=s=>{s.dispatchEvent(new Event(a))},f=s=>!(!s||typeof s!="object")&&(s.jquery!==void 0&&(s=s[0]),s.nodeType!==void 0),d=s=>f(s)?s.jquery?s[0]:s:typeof s=="string"&&s.length>0?document.querySelector(l(s)):null,p=s=>{if(!f(s)||s.getClientRects().length===0)return!1;const e=getComputedStyle(s).getPropertyValue("visibility")==="visible",i=s.closest("details:not([open])");if(!i)return e;if(i!==s){const c=s.closest("summary");if(c&&c.parentNode!==i||c===null)return!1}return e},h=s=>!s||s.nodeType!==Node.ELEMENT_NODE||!!s.classList.contains("disabled")||(s.disabled!==void 0?s.disabled:s.hasAttribute("disabled")&&s.getAttribute("disabled")!=="false"),v=s=>{if(!document.documentElement.attachShadow)return null;if(typeof s.getRootNode=="function"){const e=s.getRootNode();return e instanceof ShadowRoot?e:null}return s instanceof ShadowRoot?s:s.parentNode?v(s.parentNode):null},g=()=>{},S=s=>{s.offsetHeight},P=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,M=[],I=()=>document.documentElement.dir==="rtl",O=s=>{var e;e=()=>{const i=P();if(i){const c=s.NAME,m=i.fn[c];i.fn[c]=s.jQueryInterface,i.fn[c].Constructor=s,i.fn[c].noConflict=()=>(i.fn[c]=m,s.jQueryInterface)}},document.readyState==="loading"?(M.length||document.addEventListener("DOMContentLoaded",()=>{for(const i of M)i()}),M.push(e)):e()},$=(s,e=[],i=s)=>typeof s=="function"?s(...e):i,K=(s,e,i=!0)=>{if(!i)return void $(s);const c=(_=>{if(!_)return 0;let{transitionDuration:E,transitionDelay:C}=window.getComputedStyle(_);const R=Number.parseFloat(E),k=Number.parseFloat(C);return R||k?(E=E.split(",")[0],C=C.split(",")[0],1e3*(Number.parseFloat(E)+Number.parseFloat(C))):0})(e)+5;let m=!1;const y=({target:_})=>{_===e&&(m=!0,e.removeEventListener(a,y),$(s))};e.addEventListener(a,y),setTimeout(()=>{m||u(e)},c)},se=(s,e,i,c)=>{const m=s.length;let y=s.indexOf(e);return y===-1?!i&&c?s[m-1]:s[0]:(y+=i?1:-1,c&&(y=(y+m)%m),s[Math.max(0,Math.min(y,m-1))])},D=/[^.]*(?=\..*)\.|.*/,he=/\..*/,Ee=/::\d+$/,Te={};let Ae=1;const Pe={mouseenter:"mouseover",mouseleave:"mouseout"},Ce=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function le(s,e){return e&&`${e}::${Ae++}`||s.uidEvent||Ae++}function ie(s){const e=le(s);return s.uidEvent=e,Te[e]=Te[e]||{},Te[e]}function fe(s,e,i=null){return Object.values(s).find(c=>c.callable===e&&c.delegationSelector===i)}function ge(s,e,i){const c=typeof e=="string",m=c?i:e||i;let y=mt(s);return Ce.has(y)||(y=s),[c,m,y]}function Re(s,e,i,c,m){if(typeof e!="string"||!s)return;let[y,_,E]=ge(e,i,c);e in Pe&&(_=(B=>function(F){if(!F.relatedTarget||F.relatedTarget!==F.delegateTarget&&!F.delegateTarget.contains(F.relatedTarget))return B.call(this,F)})(_));const C=ie(s),R=C[E]||(C[E]={}),k=fe(R,_,y?i:null);if(k)return void(k.oneOff=k.oneOff&&m);const T=le(_,e.replace(D,"")),H=y?function(L,B,F){return function j(te){const oe=L.querySelectorAll(B);for(let{target:z}=te;z&&z!==this;z=z.parentNode)for(const X of oe)if(X===z)return jt(te,{delegateTarget:z}),j.oneOff&&A.off(L,te.type,B,F),F.apply(z,[te])}}(s,i,_):function(L,B){return function F(j){return jt(j,{delegateTarget:L}),F.oneOff&&A.off(L,j.type,B),B.apply(L,[j])}}(s,_);H.delegationSelector=y?i:null,H.callable=_,H.oneOff=m,H.uidEvent=T,R[T]=H,s.addEventListener(E,H,y)}function Ze(s,e,i,c,m){const y=fe(e[i],c,m);y&&(s.removeEventListener(i,y,!!m),delete e[i][y.uidEvent])}function ht(s,e,i,c){const m=e[i]||{};for(const[y,_]of Object.entries(m))y.includes(c)&&Ze(s,e,i,_.callable,_.delegationSelector)}function mt(s){return s=s.replace(he,""),Pe[s]||s}const A={on(s,e,i,c){Re(s,e,i,c,!1)},one(s,e,i,c){Re(s,e,i,c,!0)},off(s,e,i,c){if(typeof e!="string"||!s)return;const[m,y,_]=ge(e,i,c),E=_!==e,C=ie(s),R=C[_]||{},k=e.startsWith(".");if(y===void 0){if(k)for(const T of Object.keys(C))ht(s,C,T,e.slice(1));for(const[T,H]of Object.entries(R)){const L=T.replace(Ee,"");E&&!e.includes(L)||Ze(s,C,_,H.callable,H.delegationSelector)}}else{if(!Object.keys(R).length)return;Ze(s,C,_,y,m?i:null)}},trigger(s,e,i){if(typeof e!="string"||!s)return null;const c=P();let m=null,y=!0,_=!0,E=!1;e!==mt(e)&&c&&(m=c.Event(e,i),c(s).trigger(m),y=!m.isPropagationStopped(),_=!m.isImmediatePropagationStopped(),E=m.isDefaultPrevented());const C=jt(new Event(e,{bubbles:y,cancelable:!0}),i);return E&&C.preventDefault(),_&&s.dispatchEvent(C),C.defaultPrevented&&m&&m.preventDefault(),C}};function jt(s,e={}){for(const[i,c]of Object.entries(e))try{s[i]=c}catch{Object.defineProperty(s,i,{configurable:!0,get:()=>c})}return s}function Ut(s){if(s==="true")return!0;if(s==="false")return!1;if(s===Number(s).toString())return Number(s);if(s===""||s==="null")return null;if(typeof s!="string")return s;try{return JSON.parse(decodeURIComponent(s))}catch{return s}}function Ct(s){return s.replace(/[A-Z]/g,e=>`-${e.toLowerCase()}`)}const Ie={setDataAttribute(s,e,i){s.setAttribute(`data-bs-${Ct(e)}`,i)},removeDataAttribute(s,e){s.removeAttribute(`data-bs-${Ct(e)}`)},getDataAttributes(s){if(!s)return{};const e={},i=Object.keys(s.dataset).filter(c=>c.startsWith("bs")&&!c.startsWith("bsConfig"));for(const c of i){let m=c.replace(/^bs/,"");m=m.charAt(0).toLowerCase()+m.slice(1,m.length),e[m]=Ut(s.dataset[c])}return e},getDataAttribute:(s,e)=>Ut(s.getAttribute(`data-bs-${Ct(e)}`))};class gt{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,i){const c=f(i)?Ie.getDataAttribute(i,"config"):{};return{...this.constructor.Default,...typeof c=="object"?c:{},...f(i)?Ie.getDataAttributes(i):{},...typeof e=="object"?e:{}}}_typeCheckConfig(e,i=this.constructor.DefaultType){for(const[m,y]of Object.entries(i)){const _=e[m],E=f(_)?"element":(c=_)==null?`${c}`:Object.prototype.toString.call(c).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(y).test(E))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${m}" provided type "${E}" but expected type "${y}".`)}var c}}class ye extends gt{constructor(e,i){super(),(e=d(e))&&(this._element=e,this._config=this._getConfig(i),o.set(this._element,this.constructor.DATA_KEY,this))}dispose(){o.remove(this._element,this.constructor.DATA_KEY),A.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,i,c=!0){K(e,i,c)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return o.get(d(e),this.DATA_KEY)}static getOrCreateInstance(e,i={}){return this.getInstance(e)||new this(e,typeof i=="object"?i:null)}static get VERSION(){return"5.3.0"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const w=s=>{let e=s.getAttribute("data-bs-target");if(!e||e==="#"){let i=s.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),e=i&&i!=="#"?i.trim():null}return l(e)},b={find:(s,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,s)),findOne:(s,e=document.documentElement)=>Element.prototype.querySelector.call(e,s),children:(s,e)=>[].concat(...s.children).filter(i=>i.matches(e)),parents(s,e){const i=[];let c=s.parentNode.closest(e);for(;c;)i.push(c),c=c.parentNode.closest(e);return i},prev(s,e){let i=s.previousElementSibling;for(;i;){if(i.matches(e))return[i];i=i.previousElementSibling}return[]},next(s,e){let i=s.nextElementSibling;for(;i;){if(i.matches(e))return[i];i=i.nextElementSibling}return[]},focusableChildren(s){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map(i=>`${i}:not([tabindex^="-"])`).join(",");return this.find(e,s).filter(i=>!h(i)&&p(i))},getSelectorFromElement(s){const e=w(s);return e&&b.findOne(e)?e:null},getElementFromSelector(s){const e=w(s);return e?b.findOne(e):null},getMultipleElementsFromSelector(s){const e=w(s);return e?b.find(e):[]}},x=(s,e="hide")=>{const i=`click.dismiss${s.EVENT_KEY}`,c=s.NAME;A.on(document,i,`[data-bs-dismiss="${c}"]`,function(m){if(["A","AREA"].includes(this.tagName)&&m.preventDefault(),h(this))return;const y=b.getElementFromSelector(this)||this.closest(`.${c}`);s.getOrCreateInstance(y)[e]()})};class N extends ye{static get NAME(){return"alert"}close(){if(A.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback(()=>this._destroyElement(),this._element,e)}_destroyElement(){this._element.remove(),A.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(e){return this.each(function(){const i=N.getOrCreateInstance(this);if(typeof e=="string"){if(i[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);i[e](this)}})}}x(N,"close"),O(N);const J='[data-bs-toggle="button"]';class ae extends ye{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each(function(){const i=ae.getOrCreateInstance(this);e==="toggle"&&i[e]()})}}A.on(document,"click.bs.button.data-api",J,s=>{s.preventDefault();const e=s.target.closest(J);ae.getOrCreateInstance(e).toggle()}),O(ae);const V={endCallback:null,leftCallback:null,rightCallback:null},U={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class ce extends gt{constructor(e,i){super(),this._element=e,e&&ce.isSupported()&&(this._config=this._getConfig(i),this._deltaX=0,this._supportPointerEvents=!!window.PointerEvent,this._initEvents())}static get Default(){return V}static get DefaultType(){return U}static get NAME(){return"swipe"}dispose(){A.off(this._element,".bs.swipe")}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),$(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const i=e/this._deltaX;this._deltaX=0,i&&$(i>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(A.on(this._element,"pointerdown.bs.swipe",e=>this._start(e)),A.on(this._element,"pointerup.bs.swipe",e=>this._end(e)),this._element.classList.add("pointer-event")):(A.on(this._element,"touchstart.bs.swipe",e=>this._start(e)),A.on(this._element,"touchmove.bs.swipe",e=>this._move(e)),A.on(this._element,"touchend.bs.swipe",e=>this._end(e)))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&(e.pointerType==="pen"||e.pointerType==="touch")}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const Ge="next",de="prev",Ht="left",In="right",_r="slid.bs.carousel",Zi="carousel",Ln="active",Cl={ArrowLeft:In,ArrowRight:Ht},xl={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Tl={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class qt extends ye{constructor(e,i){super(e,i),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=b.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===Zi&&this.cycle()}static get Default(){return xl}static get DefaultType(){return Tl}static get NAME(){return"carousel"}next(){this._slide(Ge)}nextWhenVisible(){!document.hidden&&p(this._element)&&this.next()}prev(){this._slide(de)}pause(){this._isSliding&&u(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval(()=>this.nextWhenVisible(),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?A.one(this._element,_r,()=>this.cycle()):this.cycle())}to(e){const i=this._getItems();if(e>i.length-1||e<0)return;if(this._isSliding)return void A.one(this._element,_r,()=>this.to(e));const c=this._getItemIndex(this._getActive());if(c===e)return;const m=e>c?Ge:de;this._slide(m,i[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&A.on(this._element,"keydown.bs.carousel",e=>this._keydown(e)),this._config.pause==="hover"&&(A.on(this._element,"mouseenter.bs.carousel",()=>this.pause()),A.on(this._element,"mouseleave.bs.carousel",()=>this._maybeEnableCycle())),this._config.touch&&ce.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const i of b.find(".carousel-item img",this._element))A.on(i,"dragstart.bs.carousel",c=>c.preventDefault());const e={leftCallback:()=>this._slide(this._directionToOrder(Ht)),rightCallback:()=>this._slide(this._directionToOrder(In)),endCallback:()=>{this._config.pause==="hover"&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout(()=>this._maybeEnableCycle(),500+this._config.interval))}};this._swipeHelper=new ce(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const i=Cl[e.key];i&&(e.preventDefault(),this._slide(this._directionToOrder(i)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const i=b.findOne(".active",this._indicatorsElement);i.classList.remove(Ln),i.removeAttribute("aria-current");const c=b.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);c&&(c.classList.add(Ln),c.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const i=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=i||this._config.defaultInterval}_slide(e,i=null){if(this._isSliding)return;const c=this._getActive(),m=e===Ge,y=i||se(this._getItems(),c,m,this._config.wrap);if(y===c)return;const _=this._getItemIndex(y),E=T=>A.trigger(this._element,T,{relatedTarget:y,direction:this._orderToDirection(e),from:this._getItemIndex(c),to:_});if(E("slide.bs.carousel").defaultPrevented||!c||!y)return;const C=!!this._interval;this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(_),this._activeElement=y;const R=m?"carousel-item-start":"carousel-item-end",k=m?"carousel-item-next":"carousel-item-prev";y.classList.add(k),S(y),c.classList.add(R),y.classList.add(R),this._queueCallback(()=>{y.classList.remove(R,k),y.classList.add(Ln),c.classList.remove(Ln,k,R),this._isSliding=!1,E(_r)},c,this._isAnimated()),C&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return b.findOne(".active.carousel-item",this._element)}_getItems(){return b.find(".carousel-item",this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return I()?e===Ht?de:Ge:e===Ht?Ge:de}_orderToDirection(e){return I()?e===de?Ht:In:e===de?In:Ht}static jQueryInterface(e){return this.each(function(){const i=qt.getOrCreateInstance(this,e);if(typeof e!="number"){if(typeof e=="string"){if(i[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);i[e]()}}else i.to(e)})}}A.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",function(s){const e=b.getElementFromSelector(this);if(!e||!e.classList.contains(Zi))return;s.preventDefault();const i=qt.getOrCreateInstance(e),c=this.getAttribute("data-bs-slide-to");return c?(i.to(c),void i._maybeEnableCycle()):Ie.getDataAttribute(this,"slide")==="next"?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())}),A.on(window,"load.bs.carousel.data-api",()=>{const s=b.find('[data-bs-ride="carousel"]');for(const e of s)qt.getOrCreateInstance(e)}),O(qt);const br="show",Mn="collapse",Fn="collapsing",wr='[data-bs-toggle="collapse"]',Pl={parent:null,toggle:!0},Rl={parent:"(null|element)",toggle:"boolean"};class Wt extends ye{constructor(e,i){super(e,i),this._isTransitioning=!1,this._triggerArray=[];const c=b.find(wr);for(const m of c){const y=b.getSelectorFromElement(m),_=b.find(y).filter(E=>E===this._element);y!==null&&_.length&&this._triggerArray.push(m)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Pl}static get DefaultType(){return Rl}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter(m=>m!==this._element).map(m=>Wt.getOrCreateInstance(m,{toggle:!1}))),e.length&&e[0]._isTransitioning||A.trigger(this._element,"show.bs.collapse").defaultPrevented)return;for(const m of e)m.hide();const i=this._getDimension();this._element.classList.remove(Mn),this._element.classList.add(Fn),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const c=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback(()=>{this._isTransitioning=!1,this._element.classList.remove(Fn),this._element.classList.add(Mn,br),this._element.style[i]="",A.trigger(this._element,"shown.bs.collapse")},this._element,!0),this._element.style[i]=`${this._element[c]}px`}hide(){if(this._isTransitioning||!this._isShown()||A.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,S(this._element),this._element.classList.add(Fn),this._element.classList.remove(Mn,br);for(const i of this._triggerArray){const c=b.getElementFromSelector(i);c&&!this._isShown(c)&&this._addAriaAndCollapsedClass([i],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback(()=>{this._isTransitioning=!1,this._element.classList.remove(Fn),this._element.classList.add(Mn),A.trigger(this._element,"hidden.bs.collapse")},this._element,!0)}_isShown(e=this._element){return e.classList.contains(br)}_configAfterMerge(e){return e.toggle=!!e.toggle,e.parent=d(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(wr);for(const i of e){const c=b.getElementFromSelector(i);c&&this._addAriaAndCollapsedClass([i],this._isShown(c))}}_getFirstLevelChildren(e){const i=b.find(":scope .collapse .collapse",this._config.parent);return b.find(e,this._config.parent).filter(c=>!i.includes(c))}_addAriaAndCollapsedClass(e,i){if(e.length)for(const c of e)c.classList.toggle("collapsed",!i),c.setAttribute("aria-expanded",i)}static jQueryInterface(e){const i={};return typeof e=="string"&&/show|hide/.test(e)&&(i.toggle=!1),this.each(function(){const c=Wt.getOrCreateInstance(this,i);if(typeof e=="string"){if(c[e]===void 0)throw new TypeError(`No method named "${e}"`);c[e]()}})}}A.on(document,"click.bs.collapse.data-api",wr,function(s){(s.target.tagName==="A"||s.delegateTarget&&s.delegateTarget.tagName==="A")&&s.preventDefault();for(const e of b.getMultipleElementsFromSelector(this))Wt.getOrCreateInstance(e,{toggle:!1}).toggle()}),O(Wt);var ke="top",Me="bottom",Fe="right",$e="left",Bn="auto",zt=[ke,Me,Fe,$e],xt="start",Vt="end",eo="clippingParents",Er="viewport",Gt="popper",to="reference",Ar=zt.reduce(function(s,e){return s.concat([e+"-"+xt,e+"-"+Vt])},[]),Sr=[].concat(zt,[Bn]).reduce(function(s,e){return s.concat([e,e+"-"+xt,e+"-"+Vt])},[]),no="beforeRead",ro="read",io="afterRead",oo="beforeMain",so="main",ao="afterMain",lo="beforeWrite",co="write",uo="afterWrite",fo=[no,ro,io,oo,so,ao,lo,co,uo];function et(s){return s?(s.nodeName||"").toLowerCase():null}function Be(s){if(s==null)return window;if(s.toString()!=="[object Window]"){var e=s.ownerDocument;return e&&e.defaultView||window}return s}function Tt(s){return s instanceof Be(s).Element||s instanceof Element}function qe(s){return s instanceof Be(s).HTMLElement||s instanceof HTMLElement}function Or(s){return typeof ShadowRoot<"u"&&(s instanceof Be(s).ShadowRoot||s instanceof ShadowRoot)}const Cr={name:"applyStyles",enabled:!0,phase:"write",fn:function(s){var e=s.state;Object.keys(e.elements).forEach(function(i){var c=e.styles[i]||{},m=e.attributes[i]||{},y=e.elements[i];qe(y)&&et(y)&&(Object.assign(y.style,c),Object.keys(m).forEach(function(_){var E=m[_];E===!1?y.removeAttribute(_):y.setAttribute(_,E===!0?"":E)}))})},effect:function(s){var e=s.state,i={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,i.popper),e.styles=i,e.elements.arrow&&Object.assign(e.elements.arrow.style,i.arrow),function(){Object.keys(e.elements).forEach(function(c){var m=e.elements[c],y=e.attributes[c]||{},_=Object.keys(e.styles.hasOwnProperty(c)?e.styles[c]:i[c]).reduce(function(E,C){return E[C]="",E},{});qe(m)&&et(m)&&(Object.assign(m.style,_),Object.keys(y).forEach(function(E){m.removeAttribute(E)}))})}},requires:["computeStyles"]};function tt(s){return s.split("-")[0]}var Pt=Math.max,jn=Math.min,Qt=Math.round;function xr(){var s=navigator.userAgentData;return s!=null&&s.brands&&Array.isArray(s.brands)?s.brands.map(function(e){return e.brand+"/"+e.version}).join(" "):navigator.userAgent}function po(){return!/^((?!chrome|android).)*safari/i.test(xr())}function Kt(s,e,i){e===void 0&&(e=!1),i===void 0&&(i=!1);var c=s.getBoundingClientRect(),m=1,y=1;e&&qe(s)&&(m=s.offsetWidth>0&&Qt(c.width)/s.offsetWidth||1,y=s.offsetHeight>0&&Qt(c.height)/s.offsetHeight||1);var _=(Tt(s)?Be(s):window).visualViewport,E=!po()&&i,C=(c.left+(E&&_?_.offsetLeft:0))/m,R=(c.top+(E&&_?_.offsetTop:0))/y,k=c.width/m,T=c.height/y;return{width:k,height:T,top:R,right:C+k,bottom:R+T,left:C,x:C,y:R}}function Tr(s){var e=Kt(s),i=s.offsetWidth,c=s.offsetHeight;return Math.abs(e.width-i)<=1&&(i=e.width),Math.abs(e.height-c)<=1&&(c=e.height),{x:s.offsetLeft,y:s.offsetTop,width:i,height:c}}function ho(s,e){var i=e.getRootNode&&e.getRootNode();if(s.contains(e))return!0;if(i&&Or(i)){var c=e;do{if(c&&s.isSameNode(c))return!0;c=c.parentNode||c.host}while(c)}return!1}function ct(s){return Be(s).getComputedStyle(s)}function kl(s){return["table","td","th"].indexOf(et(s))>=0}function yt(s){return((Tt(s)?s.ownerDocument:s.document)||window.document).documentElement}function Un(s){return et(s)==="html"?s:s.assignedSlot||s.parentNode||(Or(s)?s.host:null)||yt(s)}function mo(s){return qe(s)&&ct(s).position!=="fixed"?s.offsetParent:null}function gn(s){for(var e=Be(s),i=mo(s);i&&kl(i)&&ct(i).position==="static";)i=mo(i);return i&&(et(i)==="html"||et(i)==="body"&&ct(i).position==="static")?e:i||function(c){var m=/firefox/i.test(xr());if(/Trident/i.test(xr())&&qe(c)&&ct(c).position==="fixed")return null;var y=Un(c);for(Or(y)&&(y=y.host);qe(y)&&["html","body"].indexOf(et(y))<0;){var _=ct(y);if(_.transform!=="none"||_.perspective!=="none"||_.contain==="paint"||["transform","perspective"].indexOf(_.willChange)!==-1||m&&_.willChange==="filter"||m&&_.filter&&_.filter!=="none")return y;y=y.parentNode}return null}(s)||e}function Pr(s){return["top","bottom"].indexOf(s)>=0?"x":"y"}function yn(s,e,i){return Pt(s,jn(e,i))}function go(s){return Object.assign({},{top:0,right:0,bottom:0,left:0},s)}function yo(s,e){return e.reduce(function(i,c){return i[c]=s,i},{})}const vo={name:"arrow",enabled:!0,phase:"main",fn:function(s){var e,i=s.state,c=s.name,m=s.options,y=i.elements.arrow,_=i.modifiersData.popperOffsets,E=tt(i.placement),C=Pr(E),R=[$e,Fe].indexOf(E)>=0?"height":"width";if(y&&_){var k=function(ne,Z){return go(typeof(ne=typeof ne=="function"?ne(Object.assign({},Z.rects,{placement:Z.placement})):ne)!="number"?ne:yo(ne,zt))}(m.padding,i),T=Tr(y),H=C==="y"?ke:$e,L=C==="y"?Me:Fe,B=i.rects.reference[R]+i.rects.reference[C]-_[C]-i.rects.popper[R],F=_[C]-i.rects.reference[C],j=gn(y),te=j?C==="y"?j.clientHeight||0:j.clientWidth||0:0,oe=B/2-F/2,z=k[H],X=te-T[R]-k[L],q=te/2-T[R]/2+oe,Q=yn(z,q,X),Y=C;i.modifiersData[c]=((e={})[Y]=Q,e.centerOffset=Q-q,e)}},effect:function(s){var e=s.state,i=s.options.element,c=i===void 0?"[data-popper-arrow]":i;c!=null&&(typeof c!="string"||(c=e.elements.popper.querySelector(c)))&&ho(e.elements.popper,c)&&(e.elements.arrow=c)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Xt(s){return s.split("-")[1]}var $l={top:"auto",right:"auto",bottom:"auto",left:"auto"};function _o(s){var e,i=s.popper,c=s.popperRect,m=s.placement,y=s.variation,_=s.offsets,E=s.position,C=s.gpuAcceleration,R=s.adaptive,k=s.roundOffsets,T=s.isFixed,H=_.x,L=H===void 0?0:H,B=_.y,F=B===void 0?0:B,j=typeof k=="function"?k({x:L,y:F}):{x:L,y:F};L=j.x,F=j.y;var te=_.hasOwnProperty("x"),oe=_.hasOwnProperty("y"),z=$e,X=ke,q=window;if(R){var Q=gn(i),Y="clientHeight",ne="clientWidth";Q===Be(i)&&ct(Q=yt(i)).position!=="static"&&E==="absolute"&&(Y="scrollHeight",ne="scrollWidth"),(m===ke||(m===$e||m===Fe)&&y===Vt)&&(X=Me,F-=(T&&Q===q&&q.visualViewport?q.visualViewport.height:Q[Y])-c.height,F*=C?1:-1),m!==$e&&(m!==ke&&m!==Me||y!==Vt)||(z=Fe,L-=(T&&Q===q&&q.visualViewport?q.visualViewport.width:Q[ne])-c.width,L*=C?1:-1)}var Z,pe=Object.assign({position:E},R&&$l),je=k===!0?function(Ke,De){var We=Ke.x,ze=Ke.y,ue=De.devicePixelRatio||1;return{x:Qt(We*ue)/ue||0,y:Qt(ze*ue)/ue||0}}({x:L,y:F},Be(i)):{x:L,y:F};return L=je.x,F=je.y,C?Object.assign({},pe,((Z={})[X]=oe?"0":"",Z[z]=te?"0":"",Z.transform=(q.devicePixelRatio||1)<=1?"translate("+L+"px, "+F+"px)":"translate3d("+L+"px, "+F+"px, 0)",Z)):Object.assign({},pe,((e={})[X]=oe?F+"px":"",e[z]=te?L+"px":"",e.transform="",e))}const Rr={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(s){var e=s.state,i=s.options,c=i.gpuAcceleration,m=c===void 0||c,y=i.adaptive,_=y===void 0||y,E=i.roundOffsets,C=E===void 0||E,R={placement:tt(e.placement),variation:Xt(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:m,isFixed:e.options.strategy==="fixed"};e.modifiersData.popperOffsets!=null&&(e.styles.popper=Object.assign({},e.styles.popper,_o(Object.assign({},R,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:_,roundOffsets:C})))),e.modifiersData.arrow!=null&&(e.styles.arrow=Object.assign({},e.styles.arrow,_o(Object.assign({},R,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:C})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var Hn={passive:!0};const kr={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(s){var e=s.state,i=s.instance,c=s.options,m=c.scroll,y=m===void 0||m,_=c.resize,E=_===void 0||_,C=Be(e.elements.popper),R=[].concat(e.scrollParents.reference,e.scrollParents.popper);return y&&R.forEach(function(k){k.addEventListener("scroll",i.update,Hn)}),E&&C.addEventListener("resize",i.update,Hn),function(){y&&R.forEach(function(k){k.removeEventListener("scroll",i.update,Hn)}),E&&C.removeEventListener("resize",i.update,Hn)}},data:{}};var Dl={left:"right",right:"left",bottom:"top",top:"bottom"};function qn(s){return s.replace(/left|right|bottom|top/g,function(e){return Dl[e]})}var Nl={start:"end",end:"start"};function bo(s){return s.replace(/start|end/g,function(e){return Nl[e]})}function $r(s){var e=Be(s);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function Dr(s){return Kt(yt(s)).left+$r(s).scrollLeft}function Nr(s){var e=ct(s),i=e.overflow,c=e.overflowX,m=e.overflowY;return/auto|scroll|overlay|hidden/.test(i+m+c)}function wo(s){return["html","body","#document"].indexOf(et(s))>=0?s.ownerDocument.body:qe(s)&&Nr(s)?s:wo(Un(s))}function vn(s,e){var i;e===void 0&&(e=[]);var c=wo(s),m=c===((i=s.ownerDocument)==null?void 0:i.body),y=Be(c),_=m?[y].concat(y.visualViewport||[],Nr(c)?c:[]):c,E=e.concat(_);return m?E:E.concat(vn(Un(_)))}function Ir(s){return Object.assign({},s,{left:s.x,top:s.y,right:s.x+s.width,bottom:s.y+s.height})}function Eo(s,e,i){return e===Er?Ir(function(c,m){var y=Be(c),_=yt(c),E=y.visualViewport,C=_.clientWidth,R=_.clientHeight,k=0,T=0;if(E){C=E.width,R=E.height;var H=po();(H||!H&&m==="fixed")&&(k=E.offsetLeft,T=E.offsetTop)}return{width:C,height:R,x:k+Dr(c),y:T}}(s,i)):Tt(e)?function(c,m){var y=Kt(c,!1,m==="fixed");return y.top=y.top+c.clientTop,y.left=y.left+c.clientLeft,y.bottom=y.top+c.clientHeight,y.right=y.left+c.clientWidth,y.width=c.clientWidth,y.height=c.clientHeight,y.x=y.left,y.y=y.top,y}(e,i):Ir(function(c){var m,y=yt(c),_=$r(c),E=(m=c.ownerDocument)==null?void 0:m.body,C=Pt(y.scrollWidth,y.clientWidth,E?E.scrollWidth:0,E?E.clientWidth:0),R=Pt(y.scrollHeight,y.clientHeight,E?E.scrollHeight:0,E?E.clientHeight:0),k=-_.scrollLeft+Dr(c),T=-_.scrollTop;return ct(E||y).direction==="rtl"&&(k+=Pt(y.clientWidth,E?E.clientWidth:0)-C),{width:C,height:R,x:k,y:T}}(yt(s)))}function Ao(s){var e,i=s.reference,c=s.element,m=s.placement,y=m?tt(m):null,_=m?Xt(m):null,E=i.x+i.width/2-c.width/2,C=i.y+i.height/2-c.height/2;switch(y){case ke:e={x:E,y:i.y-c.height};break;case Me:e={x:E,y:i.y+i.height};break;case Fe:e={x:i.x+i.width,y:C};break;case $e:e={x:i.x-c.width,y:C};break;default:e={x:i.x,y:i.y}}var R=y?Pr(y):null;if(R!=null){var k=R==="y"?"height":"width";switch(_){case xt:e[R]=e[R]-(i[k]/2-c[k]/2);break;case Vt:e[R]=e[R]+(i[k]/2-c[k]/2)}}return e}function Jt(s,e){e===void 0&&(e={});var i=e,c=i.placement,m=c===void 0?s.placement:c,y=i.strategy,_=y===void 0?s.strategy:y,E=i.boundary,C=E===void 0?eo:E,R=i.rootBoundary,k=R===void 0?Er:R,T=i.elementContext,H=T===void 0?Gt:T,L=i.altBoundary,B=L!==void 0&&L,F=i.padding,j=F===void 0?0:F,te=go(typeof j!="number"?j:yo(j,zt)),oe=H===Gt?to:Gt,z=s.rects.popper,X=s.elements[B?oe:H],q=function(De,We,ze,ue){var nt=We==="clippingParents"?function(re){var Ne=vn(Un(re)),Ve=["absolute","fixed"].indexOf(ct(re).position)>=0&&qe(re)?gn(re):re;return Tt(Ve)?Ne.filter(function(vt){return Tt(vt)&&ho(vt,Ve)&&et(vt)!=="body"}):[]}(De):[].concat(We),rt=[].concat(nt,[ze]),Yt=rt[0],ve=rt.reduce(function(re,Ne){var Ve=Eo(De,Ne,ue);return re.top=Pt(Ve.top,re.top),re.right=jn(Ve.right,re.right),re.bottom=jn(Ve.bottom,re.bottom),re.left=Pt(Ve.left,re.left),re},Eo(De,Yt,ue));return ve.width=ve.right-ve.left,ve.height=ve.bottom-ve.top,ve.x=ve.left,ve.y=ve.top,ve}(Tt(X)?X:X.contextElement||yt(s.elements.popper),C,k,_),Q=Kt(s.elements.reference),Y=Ao({reference:Q,element:z,strategy:"absolute",placement:m}),ne=Ir(Object.assign({},z,Y)),Z=H===Gt?ne:Q,pe={top:q.top-Z.top+te.top,bottom:Z.bottom-q.bottom+te.bottom,left:q.left-Z.left+te.left,right:Z.right-q.right+te.right},je=s.modifiersData.offset;if(H===Gt&&je){var Ke=je[m];Object.keys(pe).forEach(function(De){var We=[Fe,Me].indexOf(De)>=0?1:-1,ze=[ke,Me].indexOf(De)>=0?"y":"x";pe[De]+=Ke[ze]*We})}return pe}function Il(s,e){e===void 0&&(e={});var i=e,c=i.placement,m=i.boundary,y=i.rootBoundary,_=i.padding,E=i.flipVariations,C=i.allowedAutoPlacements,R=C===void 0?Sr:C,k=Xt(c),T=k?E?Ar:Ar.filter(function(B){return Xt(B)===k}):zt,H=T.filter(function(B){return R.indexOf(B)>=0});H.length===0&&(H=T);var L=H.reduce(function(B,F){return B[F]=Jt(s,{placement:F,boundary:m,rootBoundary:y,padding:_})[tt(F)],B},{});return Object.keys(L).sort(function(B,F){return L[B]-L[F]})}const So={name:"flip",enabled:!0,phase:"main",fn:function(s){var e=s.state,i=s.options,c=s.name;if(!e.modifiersData[c]._skip){for(var m=i.mainAxis,y=m===void 0||m,_=i.altAxis,E=_===void 0||_,C=i.fallbackPlacements,R=i.padding,k=i.boundary,T=i.rootBoundary,H=i.altBoundary,L=i.flipVariations,B=L===void 0||L,F=i.allowedAutoPlacements,j=e.options.placement,te=tt(j),oe=C||(te!==j&&B?function(re){if(tt(re)===Bn)return[];var Ne=qn(re);return[bo(re),Ne,bo(Ne)]}(j):[qn(j)]),z=[j].concat(oe).reduce(function(re,Ne){return re.concat(tt(Ne)===Bn?Il(e,{placement:Ne,boundary:k,rootBoundary:T,padding:R,flipVariations:B,allowedAutoPlacements:F}):Ne)},[]),X=e.rects.reference,q=e.rects.popper,Q=new Map,Y=!0,ne=z[0],Z=0;Z<z.length;Z++){var pe=z[Z],je=tt(pe),Ke=Xt(pe)===xt,De=[ke,Me].indexOf(je)>=0,We=De?"width":"height",ze=Jt(e,{placement:pe,boundary:k,rootBoundary:T,altBoundary:H,padding:R}),ue=De?Ke?Fe:$e:Ke?Me:ke;X[We]>q[We]&&(ue=qn(ue));var nt=qn(ue),rt=[];if(y&&rt.push(ze[je]<=0),E&&rt.push(ze[ue]<=0,ze[nt]<=0),rt.every(function(re){return re})){ne=pe,Y=!1;break}Q.set(pe,rt)}if(Y)for(var Yt=function(re){var Ne=z.find(function(Ve){var vt=Q.get(Ve);if(vt)return vt.slice(0,re).every(function(Zn){return Zn})});if(Ne)return ne=Ne,"break"},ve=B?3:1;ve>0&&Yt(ve)!=="break";ve--);e.placement!==ne&&(e.modifiersData[c]._skip=!0,e.placement=ne,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function Oo(s,e,i){return i===void 0&&(i={x:0,y:0}),{top:s.top-e.height-i.y,right:s.right-e.width+i.x,bottom:s.bottom-e.height+i.y,left:s.left-e.width-i.x}}function Co(s){return[ke,Fe,Me,$e].some(function(e){return s[e]>=0})}const xo={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(s){var e=s.state,i=s.name,c=e.rects.reference,m=e.rects.popper,y=e.modifiersData.preventOverflow,_=Jt(e,{elementContext:"reference"}),E=Jt(e,{altBoundary:!0}),C=Oo(_,c),R=Oo(E,m,y),k=Co(C),T=Co(R);e.modifiersData[i]={referenceClippingOffsets:C,popperEscapeOffsets:R,isReferenceHidden:k,hasPopperEscaped:T},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":k,"data-popper-escaped":T})}},To={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(s){var e=s.state,i=s.options,c=s.name,m=i.offset,y=m===void 0?[0,0]:m,_=Sr.reduce(function(k,T){return k[T]=function(H,L,B){var F=tt(H),j=[$e,ke].indexOf(F)>=0?-1:1,te=typeof B=="function"?B(Object.assign({},L,{placement:H})):B,oe=te[0],z=te[1];return oe=oe||0,z=(z||0)*j,[$e,Fe].indexOf(F)>=0?{x:z,y:oe}:{x:oe,y:z}}(T,e.rects,y),k},{}),E=_[e.placement],C=E.x,R=E.y;e.modifiersData.popperOffsets!=null&&(e.modifiersData.popperOffsets.x+=C,e.modifiersData.popperOffsets.y+=R),e.modifiersData[c]=_}},Lr={name:"popperOffsets",enabled:!0,phase:"read",fn:function(s){var e=s.state,i=s.name;e.modifiersData[i]=Ao({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},Po={name:"preventOverflow",enabled:!0,phase:"main",fn:function(s){var e=s.state,i=s.options,c=s.name,m=i.mainAxis,y=m===void 0||m,_=i.altAxis,E=_!==void 0&&_,C=i.boundary,R=i.rootBoundary,k=i.altBoundary,T=i.padding,H=i.tether,L=H===void 0||H,B=i.tetherOffset,F=B===void 0?0:B,j=Jt(e,{boundary:C,rootBoundary:R,padding:T,altBoundary:k}),te=tt(e.placement),oe=Xt(e.placement),z=!oe,X=Pr(te),q=X==="x"?"y":"x",Q=e.modifiersData.popperOffsets,Y=e.rects.reference,ne=e.rects.popper,Z=typeof F=="function"?F(Object.assign({},e.rects,{placement:e.placement})):F,pe=typeof Z=="number"?{mainAxis:Z,altAxis:Z}:Object.assign({mainAxis:0,altAxis:0},Z),je=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,Ke={x:0,y:0};if(Q){if(y){var De,We=X==="y"?ke:$e,ze=X==="y"?Me:Fe,ue=X==="y"?"height":"width",nt=Q[X],rt=nt+j[We],Yt=nt-j[ze],ve=L?-ne[ue]/2:0,re=oe===xt?Y[ue]:ne[ue],Ne=oe===xt?-ne[ue]:-Y[ue],Ve=e.elements.arrow,vt=L&&Ve?Tr(Ve):{width:0,height:0},Zn=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},hs=Zn[We],ms=Zn[ze],er=yn(0,Y[ue],vt[ue]),Ac=z?Y[ue]/2-ve-er-hs-pe.mainAxis:re-er-hs-pe.mainAxis,Sc=z?-Y[ue]/2+ve+er+ms+pe.mainAxis:Ne+er+ms+pe.mainAxis,qr=e.elements.arrow&&gn(e.elements.arrow),Oc=qr?X==="y"?qr.clientTop||0:qr.clientLeft||0:0,gs=(De=je==null?void 0:je[X])!=null?De:0,Cc=nt+Sc-gs,ys=yn(L?jn(rt,nt+Ac-gs-Oc):rt,nt,L?Pt(Yt,Cc):Yt);Q[X]=ys,Ke[X]=ys-nt}if(E){var vs,xc=X==="x"?ke:$e,Tc=X==="x"?Me:Fe,Nt=Q[q],tr=q==="y"?"height":"width",_s=Nt+j[xc],bs=Nt-j[Tc],Wr=[ke,$e].indexOf(te)!==-1,ws=(vs=je==null?void 0:je[q])!=null?vs:0,Es=Wr?_s:Nt-Y[tr]-ne[tr]-ws+pe.altAxis,As=Wr?Nt+Y[tr]+ne[tr]-ws-pe.altAxis:bs,Ss=L&&Wr?function(Pc,Rc,zr){var Os=yn(Pc,Rc,zr);return Os>zr?zr:Os}(Es,Nt,As):yn(L?Es:_s,Nt,L?As:bs);Q[q]=Ss,Ke[q]=Ss-Nt}e.modifiersData[c]=Ke}},requiresIfExists:["offset"]};function Ll(s,e,i){i===void 0&&(i=!1);var c,m,y=qe(e),_=qe(e)&&function(T){var H=T.getBoundingClientRect(),L=Qt(H.width)/T.offsetWidth||1,B=Qt(H.height)/T.offsetHeight||1;return L!==1||B!==1}(e),E=yt(e),C=Kt(s,_,i),R={scrollLeft:0,scrollTop:0},k={x:0,y:0};return(y||!y&&!i)&&((et(e)!=="body"||Nr(E))&&(R=(c=e)!==Be(c)&&qe(c)?{scrollLeft:(m=c).scrollLeft,scrollTop:m.scrollTop}:$r(c)),qe(e)?((k=Kt(e,!0)).x+=e.clientLeft,k.y+=e.clientTop):E&&(k.x=Dr(E))),{x:C.left+R.scrollLeft-k.x,y:C.top+R.scrollTop-k.y,width:C.width,height:C.height}}function Ml(s){var e=new Map,i=new Set,c=[];function m(y){i.add(y.name),[].concat(y.requires||[],y.requiresIfExists||[]).forEach(function(_){if(!i.has(_)){var E=e.get(_);E&&m(E)}}),c.push(y)}return s.forEach(function(y){e.set(y.name,y)}),s.forEach(function(y){i.has(y.name)||m(y)}),c}var Ro={placement:"bottom",modifiers:[],strategy:"absolute"};function ko(){for(var s=arguments.length,e=new Array(s),i=0;i<s;i++)e[i]=arguments[i];return!e.some(function(c){return!(c&&typeof c.getBoundingClientRect=="function")})}function Wn(s){s===void 0&&(s={});var e=s,i=e.defaultModifiers,c=i===void 0?[]:i,m=e.defaultOptions,y=m===void 0?Ro:m;return function(_,E,C){C===void 0&&(C=y);var R,k,T={placement:"bottom",orderedModifiers:[],options:Object.assign({},Ro,y),modifiersData:{},elements:{reference:_,popper:E},attributes:{},styles:{}},H=[],L=!1,B={state:T,setOptions:function(j){var te=typeof j=="function"?j(T.options):j;F(),T.options=Object.assign({},y,T.options,te),T.scrollParents={reference:Tt(_)?vn(_):_.contextElement?vn(_.contextElement):[],popper:vn(E)};var oe,z,X=function(q){var Q=Ml(q);return fo.reduce(function(Y,ne){return Y.concat(Q.filter(function(Z){return Z.phase===ne}))},[])}((oe=[].concat(c,T.options.modifiers),z=oe.reduce(function(q,Q){var Y=q[Q.name];return q[Q.name]=Y?Object.assign({},Y,Q,{options:Object.assign({},Y.options,Q.options),data:Object.assign({},Y.data,Q.data)}):Q,q},{}),Object.keys(z).map(function(q){return z[q]})));return T.orderedModifiers=X.filter(function(q){return q.enabled}),T.orderedModifiers.forEach(function(q){var Q=q.name,Y=q.options,ne=Y===void 0?{}:Y,Z=q.effect;if(typeof Z=="function"){var pe=Z({state:T,name:Q,instance:B,options:ne});H.push(pe||function(){})}}),B.update()},forceUpdate:function(){if(!L){var j=T.elements,te=j.reference,oe=j.popper;if(ko(te,oe)){T.rects={reference:Ll(te,gn(oe),T.options.strategy==="fixed"),popper:Tr(oe)},T.reset=!1,T.placement=T.options.placement,T.orderedModifiers.forEach(function(Z){return T.modifiersData[Z.name]=Object.assign({},Z.data)});for(var z=0;z<T.orderedModifiers.length;z++)if(T.reset!==!0){var X=T.orderedModifiers[z],q=X.fn,Q=X.options,Y=Q===void 0?{}:Q,ne=X.name;typeof q=="function"&&(T=q({state:T,options:Y,name:ne,instance:B})||T)}else T.reset=!1,z=-1}}},update:(R=function(){return new Promise(function(j){B.forceUpdate(),j(T)})},function(){return k||(k=new Promise(function(j){Promise.resolve().then(function(){k=void 0,j(R())})})),k}),destroy:function(){F(),L=!0}};if(!ko(_,E))return B;function F(){H.forEach(function(j){return j()}),H=[]}return B.setOptions(C).then(function(j){!L&&C.onFirstUpdate&&C.onFirstUpdate(j)}),B}}var Fl=Wn(),Bl=Wn({defaultModifiers:[kr,Lr,Rr,Cr]}),Mr=Wn({defaultModifiers:[kr,Lr,Rr,Cr,To,So,Po,vo,xo]});const $o=Object.freeze(Object.defineProperty({__proto__:null,afterMain:ao,afterRead:io,afterWrite:uo,applyStyles:Cr,arrow:vo,auto:Bn,basePlacements:zt,beforeMain:oo,beforeRead:no,beforeWrite:lo,bottom:Me,clippingParents:eo,computeStyles:Rr,createPopper:Mr,createPopperBase:Fl,createPopperLite:Bl,detectOverflow:Jt,end:Vt,eventListeners:kr,flip:So,hide:xo,left:$e,main:so,modifierPhases:fo,offset:To,placements:Sr,popper:Gt,popperGenerator:Wn,popperOffsets:Lr,preventOverflow:Po,read:ro,reference:to,right:Fe,start:xt,top:ke,variationPlacements:Ar,viewport:Er,write:co},Symbol.toStringTag,{value:"Module"})),Do="dropdown",jl="ArrowUp",No="ArrowDown",Io="click.bs.dropdown.data-api",Lo="keydown.bs.dropdown.data-api",_n="show",Rt='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Ul=`${Rt}.show`,zn=".dropdown-menu",Hl=I()?"top-end":"top-start",ql=I()?"top-start":"top-end",Wl=I()?"bottom-end":"bottom-start",zl=I()?"bottom-start":"bottom-end",Vl=I()?"left-start":"right-start",Gl=I()?"right-start":"left-start",Ql={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},Kl={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class Qe extends ye{constructor(e,i){super(e,i),this._popper=null,this._parent=this._element.parentNode,this._menu=b.next(this._element,zn)[0]||b.prev(this._element,zn)[0]||b.findOne(zn,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return Ql}static get DefaultType(){return Kl}static get NAME(){return Do}toggle(){return this._isShown()?this.hide():this.show()}show(){if(h(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!A.trigger(this._element,"show.bs.dropdown",e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const i of[].concat(...document.body.children))A.on(i,"mouseover",g);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(_n),this._element.classList.add(_n),A.trigger(this._element,"shown.bs.dropdown",e)}}hide(){if(h(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!A.trigger(this._element,"hide.bs.dropdown",e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const i of[].concat(...document.body.children))A.off(i,"mouseover",g);this._popper&&this._popper.destroy(),this._menu.classList.remove(_n),this._element.classList.remove(_n),this._element.setAttribute("aria-expanded","false"),Ie.removeDataAttribute(this._menu,"popper"),A.trigger(this._element,"hidden.bs.dropdown",e)}}_getConfig(e){if(typeof(e=super._getConfig(e)).reference=="object"&&!f(e.reference)&&typeof e.reference.getBoundingClientRect!="function")throw new TypeError(`${Do.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if($o===void 0)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;this._config.reference==="parent"?e=this._parent:f(this._config.reference)?e=d(this._config.reference):typeof this._config.reference=="object"&&(e=this._config.reference);const i=this._getPopperConfig();this._popper=Mr(e,this._menu,i)}_isShown(){return this._menu.classList.contains(_n)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return Vl;if(e.classList.contains("dropstart"))return Gl;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const i=getComputedStyle(this._menu).getPropertyValue("--bs-position").trim()==="end";return e.classList.contains("dropup")?i?ql:Hl:i?zl:Wl}_detectNavbar(){return this._element.closest(".navbar")!==null}_getOffset(){const{offset:e}=this._config;return typeof e=="string"?e.split(",").map(i=>Number.parseInt(i,10)):typeof e=="function"?i=>e(i,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||this._config.display==="static")&&(Ie.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...$(this._config.popperConfig,[e])}}_selectMenuItem({key:e,target:i}){const c=b.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(m=>p(m));c.length&&se(c,i,e===No,!c.includes(i)).focus()}static jQueryInterface(e){return this.each(function(){const i=Qe.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0)throw new TypeError(`No method named "${e}"`);i[e]()}})}static clearMenus(e){if(e.button===2||e.type==="keyup"&&e.key!=="Tab")return;const i=b.find(Ul);for(const c of i){const m=Qe.getInstance(c);if(!m||m._config.autoClose===!1)continue;const y=e.composedPath(),_=y.includes(m._menu);if(y.includes(m._element)||m._config.autoClose==="inside"&&!_||m._config.autoClose==="outside"&&_||m._menu.contains(e.target)&&(e.type==="keyup"&&e.key==="Tab"||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const E={relatedTarget:m._element};e.type==="click"&&(E.clickEvent=e),m._completeHide(E)}}static dataApiKeydownHandler(e){const i=/input|textarea/i.test(e.target.tagName),c=e.key==="Escape",m=[jl,No].includes(e.key);if(!m&&!c||i&&!c)return;e.preventDefault();const y=this.matches(Rt)?this:b.prev(this,Rt)[0]||b.next(this,Rt)[0]||b.findOne(Rt,e.delegateTarget.parentNode),_=Qe.getOrCreateInstance(y);if(m)return e.stopPropagation(),_.show(),void _._selectMenuItem(e);_._isShown()&&(e.stopPropagation(),_.hide(),y.focus())}}A.on(document,Lo,Rt,Qe.dataApiKeydownHandler),A.on(document,Lo,zn,Qe.dataApiKeydownHandler),A.on(document,Io,Qe.clearMenus),A.on(document,"keyup.bs.dropdown.data-api",Qe.clearMenus),A.on(document,Io,Rt,function(s){s.preventDefault(),Qe.getOrCreateInstance(this).toggle()}),O(Qe);const Mo="show",Fo="mousedown.bs.backdrop",Xl={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Jl={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class Bo extends gt{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return Xl}static get DefaultType(){return Jl}static get NAME(){return"backdrop"}show(e){if(!this._config.isVisible)return void $(e);this._append();const i=this._getElement();this._config.isAnimated&&S(i),i.classList.add(Mo),this._emulateAnimation(()=>{$(e)})}hide(e){this._config.isVisible?(this._getElement().classList.remove(Mo),this._emulateAnimation(()=>{this.dispose(),$(e)})):$(e)}dispose(){this._isAppended&&(A.off(this._element,Fo),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=d(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),A.on(e,Fo,()=>{$(this._config.clickCallback)}),this._isAppended=!0}_emulateAnimation(e){K(e,this._getElement(),this._config.isAnimated)}}const jo=".bs.focustrap",Uo="backward",Yl={autofocus:!0,trapElement:null},Zl={autofocus:"boolean",trapElement:"element"};class Ho extends gt{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Yl}static get DefaultType(){return Zl}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),A.off(document,jo),A.on(document,"focusin.bs.focustrap",e=>this._handleFocusin(e)),A.on(document,"keydown.tab.bs.focustrap",e=>this._handleKeydown(e)),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,A.off(document,jo))}_handleFocusin(e){const{trapElement:i}=this._config;if(e.target===document||e.target===i||i.contains(e.target))return;const c=b.focusableChildren(i);c.length===0?i.focus():this._lastTabNavDirection===Uo?c[c.length-1].focus():c[0].focus()}_handleKeydown(e){e.key==="Tab"&&(this._lastTabNavDirection=e.shiftKey?Uo:"forward")}}const qo=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Wo=".sticky-top",Vn="padding-right",zo="margin-right";class Fr{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,Vn,i=>i+e),this._setElementAttributes(qo,Vn,i=>i+e),this._setElementAttributes(Wo,zo,i=>i-e)}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,Vn),this._resetElementAttributes(qo,Vn),this._resetElementAttributes(Wo,zo)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,i,c){const m=this.getWidth();this._applyManipulationCallback(e,y=>{if(y!==this._element&&window.innerWidth>y.clientWidth+m)return;this._saveInitialAttribute(y,i);const _=window.getComputedStyle(y).getPropertyValue(i);y.style.setProperty(i,`${c(Number.parseFloat(_))}px`)})}_saveInitialAttribute(e,i){const c=e.style.getPropertyValue(i);c&&Ie.setDataAttribute(e,i,c)}_resetElementAttributes(e,i){this._applyManipulationCallback(e,c=>{const m=Ie.getDataAttribute(c,i);m!==null?(Ie.removeDataAttribute(c,i),c.style.setProperty(i,m)):c.style.removeProperty(i)})}_applyManipulationCallback(e,i){if(f(e))i(e);else for(const c of b.find(e,this._element))i(c)}}const Vo=".bs.modal",Go="hidden.bs.modal",Qo="show.bs.modal",Ko="modal-open",Xo="show",Br="modal-static",ec={backdrop:!0,focus:!0,keyboard:!0},tc={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class kt extends ye{constructor(e,i){super(e,i),this._dialog=b.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Fr,this._addEventListeners()}static get Default(){return ec}static get DefaultType(){return tc}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||A.trigger(this._element,Qo,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Ko),this._adjustDialog(),this._backdrop.show(()=>this._showElement(e)))}hide(){this._isShown&&!this._isTransitioning&&(A.trigger(this._element,"hide.bs.modal").defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Xo),this._queueCallback(()=>this._hideModal(),this._element,this._isAnimated())))}dispose(){A.off(window,Vo),A.off(this._dialog,Vo),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Bo({isVisible:!!this._config.backdrop,isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ho({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const i=b.findOne(".modal-body",this._dialog);i&&(i.scrollTop=0),S(this._element),this._element.classList.add(Xo),this._queueCallback(()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,A.trigger(this._element,"shown.bs.modal",{relatedTarget:e})},this._dialog,this._isAnimated())}_addEventListeners(){A.on(this._element,"keydown.dismiss.bs.modal",e=>{e.key==="Escape"&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())}),A.on(window,"resize.bs.modal",()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()}),A.on(this._element,"mousedown.dismiss.bs.modal",e=>{A.one(this._element,"click.dismiss.bs.modal",i=>{this._element===e.target&&this._element===i.target&&(this._config.backdrop!=="static"?this._config.backdrop&&this.hide():this._triggerBackdropTransition())})})}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(()=>{document.body.classList.remove(Ko),this._resetAdjustments(),this._scrollBar.reset(),A.trigger(this._element,Go)})}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(A.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,i=this._element.style.overflowY;i==="hidden"||this._element.classList.contains(Br)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Br),this._queueCallback(()=>{this._element.classList.remove(Br),this._queueCallback(()=>{this._element.style.overflowY=i},this._dialog)},this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,i=this._scrollBar.getWidth(),c=i>0;if(c&&!e){const m=I()?"paddingLeft":"paddingRight";this._element.style[m]=`${i}px`}if(!c&&e){const m=I()?"paddingRight":"paddingLeft";this._element.style[m]=`${i}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,i){return this.each(function(){const c=kt.getOrCreateInstance(this,e);if(typeof e=="string"){if(c[e]===void 0)throw new TypeError(`No method named "${e}"`);c[e](i)}})}}A.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',function(s){const e=b.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&s.preventDefault(),A.one(e,Qo,c=>{c.defaultPrevented||A.one(e,Go,()=>{p(this)&&this.focus()})});const i=b.findOne(".modal.show");i&&kt.getInstance(i).hide(),kt.getOrCreateInstance(e).toggle(this)}),x(kt),O(kt);const Jo="show",Yo="showing",Zo="hiding",es=".offcanvas.show",ts="hidePrevented.bs.offcanvas",ns="hidden.bs.offcanvas",nc={backdrop:!0,keyboard:!0,scroll:!1},rc={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class ut extends ye{constructor(e,i){super(e,i),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return nc}static get DefaultType(){return rc}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||A.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||new Fr().hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Yo),this._queueCallback(()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(Jo),this._element.classList.remove(Yo),A.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:e})},this._element,!0))}hide(){this._isShown&&(A.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(Zo),this._backdrop.hide(),this._queueCallback(()=>{this._element.classList.remove(Jo,Zo),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||new Fr().reset(),A.trigger(this._element,ns)},this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=!!this._config.backdrop;return new Bo({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{this._config.backdrop!=="static"?this.hide():A.trigger(this._element,ts)}:null})}_initializeFocusTrap(){return new Ho({trapElement:this._element})}_addEventListeners(){A.on(this._element,"keydown.dismiss.bs.offcanvas",e=>{e.key==="Escape"&&(this._config.keyboard?this.hide():A.trigger(this._element,ts))})}static jQueryInterface(e){return this.each(function(){const i=ut.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);i[e](this)}})}}A.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',function(s){const e=b.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&s.preventDefault(),h(this))return;A.one(e,ns,()=>{p(this)&&this.focus()});const i=b.findOne(es);i&&i!==e&&ut.getInstance(i).hide(),ut.getOrCreateInstance(e).toggle(this)}),A.on(window,"load.bs.offcanvas.data-api",()=>{for(const s of b.find(es))ut.getOrCreateInstance(s).show()}),A.on(window,"resize.bs.offcanvas",()=>{for(const s of b.find("[aria-modal][class*=show][class*=offcanvas-]"))getComputedStyle(s).position!=="fixed"&&ut.getOrCreateInstance(s).hide()}),x(ut),O(ut);const rs={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},ic=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),oc=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,sc=(s,e)=>{const i=s.nodeName.toLowerCase();return e.includes(i)?!ic.has(i)||!!oc.test(s.nodeValue):e.filter(c=>c instanceof RegExp).some(c=>c.test(i))},ac={allowList:rs,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},lc={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},cc={entry:"(string|element|function|null)",selector:"(string|element)"};class uc extends gt{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return ac}static get DefaultType(){return lc}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map(e=>this._resolvePossibleFunction(e)).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[m,y]of Object.entries(this._config.content))this._setContent(e,y,m);const i=e.children[0],c=this._resolvePossibleFunction(this._config.extraClass);return c&&i.classList.add(...c.split(" ")),i}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[i,c]of Object.entries(e))super._typeCheckConfig({selector:i,entry:c},cc)}_setContent(e,i,c){const m=b.findOne(c,e);m&&((i=this._resolvePossibleFunction(i))?f(i)?this._putElementInTemplate(d(i),m):this._config.html?m.innerHTML=this._maybeSanitize(i):m.textContent=i:m.remove())}_maybeSanitize(e){return this._config.sanitize?function(i,c,m){if(!i.length)return i;if(m&&typeof m=="function")return m(i);const y=new window.DOMParser().parseFromString(i,"text/html"),_=[].concat(...y.body.querySelectorAll("*"));for(const E of _){const C=E.nodeName.toLowerCase();if(!Object.keys(c).includes(C)){E.remove();continue}const R=[].concat(...E.attributes),k=[].concat(c["*"]||[],c[C]||[]);for(const T of R)sc(T,k)||E.removeAttribute(T.nodeName)}return y.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return $(e,[this])}_putElementInTemplate(e,i){if(this._config.html)return i.innerHTML="",void i.append(e);i.textContent=e.textContent}}const fc=new Set(["sanitize","allowList","sanitizeFn"]),jr="fade",Gn="show",is=".modal",os="hide.bs.modal",Qn="hover",ss="focus",dc={AUTO:"auto",TOP:"top",RIGHT:I()?"left":"right",BOTTOM:"bottom",LEFT:I()?"right":"left"},pc={allowList:rs,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},hc={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class $t extends ye{constructor(e,i){if($o===void 0)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,i),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return pc}static get DefaultType(){return hc}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),A.off(this._element.closest(is),os,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if(this._element.style.display==="none")throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=A.trigger(this._element,this.constructor.eventName("show")),i=(v(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!i)return;this._disposePopper();const c=this._getTipElement();this._element.setAttribute("aria-describedby",c.getAttribute("id"));const{container:m}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(m.append(c),A.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(c),c.classList.add(Gn),"ontouchstart"in document.documentElement)for(const y of[].concat(...document.body.children))A.on(y,"mouseover",g);this._queueCallback(()=>{A.trigger(this._element,this.constructor.eventName("shown")),this._isHovered===!1&&this._leave(),this._isHovered=!1},this.tip,this._isAnimated())}hide(){if(this._isShown()&&!A.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(Gn),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))A.off(e,"mouseover",g);this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,this._isHovered=null,this._queueCallback(()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),A.trigger(this._element,this.constructor.eventName("hidden")))},this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return!!this._getTitle()}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const i=this._getTemplateFactory(e).toHtml();if(!i)return null;i.classList.remove(jr,Gn),i.classList.add(`bs-${this.constructor.NAME}-auto`);const c=(m=>{do m+=Math.floor(1e6*Math.random());while(document.getElementById(m));return m})(this.constructor.NAME).toString();return i.setAttribute("id",c),this._isAnimated()&&i.classList.add(jr),i}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new uc({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(jr)}_isShown(){return this.tip&&this.tip.classList.contains(Gn)}_createPopper(e){const i=$(this._config.placement,[this,e,this._element]),c=dc[i.toUpperCase()];return Mr(this._element,e,this._getPopperConfig(c))}_getOffset(){const{offset:e}=this._config;return typeof e=="string"?e.split(",").map(i=>Number.parseInt(i,10)):typeof e=="function"?i=>e(i,this._element):e}_resolvePossibleFunction(e){return $(e,[this._element])}_getPopperConfig(e){const i={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:c=>{this._getTipElement().setAttribute("data-popper-placement",c.state.placement)}}]};return{...i,...$(this._config.popperConfig,[i])}}_setListeners(){const e=this._config.trigger.split(" ");for(const i of e)if(i==="click")A.on(this._element,this.constructor.eventName("click"),this._config.selector,c=>{this._initializeOnDelegatedTarget(c).toggle()});else if(i!=="manual"){const c=i===Qn?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),m=i===Qn?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");A.on(this._element,c,this._config.selector,y=>{const _=this._initializeOnDelegatedTarget(y);_._activeTrigger[y.type==="focusin"?ss:Qn]=!0,_._enter()}),A.on(this._element,m,this._config.selector,y=>{const _=this._initializeOnDelegatedTarget(y);_._activeTrigger[y.type==="focusout"?ss:Qn]=_._element.contains(y.relatedTarget),_._leave()})}this._hideModalHandler=()=>{this._element&&this.hide()},A.on(this._element.closest(is),os,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout(()=>{this._isHovered&&this.show()},this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout(()=>{this._isHovered||this.hide()},this._config.delay.hide))}_setTimeout(e,i){clearTimeout(this._timeout),this._timeout=setTimeout(e,i)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const i=Ie.getDataAttributes(this._element);for(const c of Object.keys(i))fc.has(c)&&delete i[c];return e={...i,...typeof e=="object"&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=e.container===!1?document.body:d(e.container),typeof e.delay=="number"&&(e.delay={show:e.delay,hide:e.delay}),typeof e.title=="number"&&(e.title=e.title.toString()),typeof e.content=="number"&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const[i,c]of Object.entries(this._config))this.constructor.Default[i]!==c&&(e[i]=c);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each(function(){const i=$t.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0)throw new TypeError(`No method named "${e}"`);i[e]()}})}}O($t);const mc={...$t.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},gc={...$t.DefaultType,content:"(null|string|element|function)"};class Kn extends $t{static get Default(){return mc}static get DefaultType(){return gc}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each(function(){const i=Kn.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0)throw new TypeError(`No method named "${e}"`);i[e]()}})}}O(Kn);const as="click.bs.scrollspy",bn="active",ls="[href]",yc={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},vc={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class wn extends ye{constructor(e,i){super(e,i),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement=getComputedStyle(this._element).overflowY==="visible"?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return yc}static get DefaultType(){return vc}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=d(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,typeof e.threshold=="string"&&(e.threshold=e.threshold.split(",").map(i=>Number.parseFloat(i))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(A.off(this._config.target,as),A.on(this._config.target,as,ls,e=>{const i=this._observableSections.get(e.target.hash);if(i){e.preventDefault();const c=this._rootElement||window,m=i.offsetTop-this._element.offsetTop;if(c.scrollTo)return void c.scrollTo({top:m,behavior:"smooth"});c.scrollTop=m}}))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver(i=>this._observerCallback(i),e)}_observerCallback(e){const i=_=>this._targetLinks.get(`#${_.target.id}`),c=_=>{this._previousScrollData.visibleEntryTop=_.target.offsetTop,this._process(i(_))},m=(this._rootElement||document.documentElement).scrollTop,y=m>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=m;for(const _ of e){if(!_.isIntersecting){this._activeTarget=null,this._clearActiveClass(i(_));continue}const E=_.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(y&&E){if(c(_),!m)return}else y||E||c(_)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=b.find(ls,this._config.target);for(const i of e){if(!i.hash||h(i))continue;const c=b.findOne(decodeURI(i.hash),this._element);p(c)&&(this._targetLinks.set(decodeURI(i.hash),i),this._observableSections.set(i.hash,c))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(bn),this._activateParents(e),A.trigger(this._element,"activate.bs.scrollspy",{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))b.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(bn);else for(const i of b.parents(e,".nav, .list-group"))for(const c of b.prev(i,".nav-link, .nav-item > .nav-link, .list-group-item"))c.classList.add(bn)}_clearActiveClass(e){e.classList.remove(bn);const i=b.find("[href].active",e);for(const c of i)c.classList.remove(bn)}static jQueryInterface(e){return this.each(function(){const i=wn.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);i[e]()}})}}A.on(window,"load.bs.scrollspy.data-api",()=>{for(const s of b.find('[data-bs-spy="scroll"]'))wn.getOrCreateInstance(s)}),O(wn);const _c="ArrowLeft",cs="ArrowRight",bc="ArrowUp",us="ArrowDown",Xn="active",fs="fade",Ur="show",ds='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Hr=`.nav-link:not(.dropdown-toggle), .list-group-item:not(.dropdown-toggle), [role="tab"]:not(.dropdown-toggle), ${ds}`;class Dt extends ye{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),A.on(this._element,"keydown.bs.tab",i=>this._keydown(i)))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const i=this._getActiveElem(),c=i?A.trigger(i,"hide.bs.tab",{relatedTarget:e}):null;A.trigger(e,"show.bs.tab",{relatedTarget:i}).defaultPrevented||c&&c.defaultPrevented||(this._deactivate(i,e),this._activate(e,i))}_activate(e,i){e&&(e.classList.add(Xn),this._activate(b.getElementFromSelector(e)),this._queueCallback(()=>{e.getAttribute("role")==="tab"?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),A.trigger(e,"shown.bs.tab",{relatedTarget:i})):e.classList.add(Ur)},e,e.classList.contains(fs)))}_deactivate(e,i){e&&(e.classList.remove(Xn),e.blur(),this._deactivate(b.getElementFromSelector(e)),this._queueCallback(()=>{e.getAttribute("role")==="tab"?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),A.trigger(e,"hidden.bs.tab",{relatedTarget:i})):e.classList.remove(Ur)},e,e.classList.contains(fs)))}_keydown(e){if(![_c,cs,bc,us].includes(e.key))return;e.stopPropagation(),e.preventDefault();const i=[cs,us].includes(e.key),c=se(this._getChildren().filter(m=>!h(m)),e.target,i,!0);c&&(c.focus({preventScroll:!0}),Dt.getOrCreateInstance(c).show())}_getChildren(){return b.find(Hr,this._parent)}_getActiveElem(){return this._getChildren().find(e=>this._elemIsActive(e))||null}_setInitialAttributes(e,i){this._setAttributeIfNotExists(e,"role","tablist");for(const c of i)this._setInitialAttributesOnChild(c)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const i=this._elemIsActive(e),c=this._getOuterElement(e);e.setAttribute("aria-selected",i),c!==e&&this._setAttributeIfNotExists(c,"role","presentation"),i||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const i=b.getElementFromSelector(e);i&&(this._setAttributeIfNotExists(i,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(i,"aria-labelledby",`${e.id}`))}_toggleDropDown(e,i){const c=this._getOuterElement(e);if(!c.classList.contains("dropdown"))return;const m=(y,_)=>{const E=b.findOne(y,c);E&&E.classList.toggle(_,i)};m(".dropdown-toggle",Xn),m(".dropdown-menu",Ur),c.setAttribute("aria-expanded",i)}_setAttributeIfNotExists(e,i,c){e.hasAttribute(i)||e.setAttribute(i,c)}_elemIsActive(e){return e.classList.contains(Xn)}_getInnerElement(e){return e.matches(Hr)?e:b.findOne(Hr,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each(function(){const i=Dt.getOrCreateInstance(this);if(typeof e=="string"){if(i[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);i[e]()}})}}A.on(document,"click.bs.tab",ds,function(s){["A","AREA"].includes(this.tagName)&&s.preventDefault(),h(this)||Dt.getOrCreateInstance(this).show()}),A.on(window,"load.bs.tab",()=>{for(const s of b.find('.active[data-bs-toggle="tab"], .active[data-bs-toggle="pill"], .active[data-bs-toggle="list"]'))Dt.getOrCreateInstance(s)}),O(Dt);const ps="hide",Jn="show",Yn="showing",wc={animation:"boolean",autohide:"boolean",delay:"number"},Ec={animation:!0,autohide:!0,delay:5e3};class En extends ye{constructor(e,i){super(e,i),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Ec}static get DefaultType(){return wc}static get NAME(){return"toast"}show(){A.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(ps),S(this._element),this._element.classList.add(Jn,Yn),this._queueCallback(()=>{this._element.classList.remove(Yn),A.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()},this._element,this._config.animation))}hide(){this.isShown()&&(A.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(Yn),this._queueCallback(()=>{this._element.classList.add(ps),this._element.classList.remove(Yn,Jn),A.trigger(this._element,"hidden.bs.toast")},this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(Jn),super.dispose()}isShown(){return this._element.classList.contains(Jn)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(()=>{this.hide()},this._config.delay)))}_onInteraction(e,i){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=i;break;case"focusin":case"focusout":this._hasKeyboardInteraction=i}if(i)return void this._clearTimeout();const c=e.relatedTarget;this._element===c||this._element.contains(c)||this._maybeScheduleHide()}_setListeners(){A.on(this._element,"mouseover.bs.toast",e=>this._onInteraction(e,!0)),A.on(this._element,"mouseout.bs.toast",e=>this._onInteraction(e,!1)),A.on(this._element,"focusin.bs.toast",e=>this._onInteraction(e,!0)),A.on(this._element,"focusout.bs.toast",e=>this._onInteraction(e,!1))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each(function(){const i=En.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0)throw new TypeError(`No method named "${e}"`);i[e](this)}})}}return x(En),O(En),{Alert:N,Button:ae,Carousel:qt,Collapse:Wt,Dropdown:Qe,Modal:kt,Offcanvas:ut,Popover:Kn,ScrollSpy:wn,Tab:Dt,Toast:En,Tooltip:$t}})})(sd);const ad={name:"Toast",props:{maxMessages:{type:Number,default:4},timeOut:{type:Number,default:5e3},closeable:{type:Boolean,default:!0}},data(){return{ids:0,messages:[]}},created(){$n.on("toast",this.handleMessageEvent)},methods:{handleMessageEvent(n){if(!n.message)throw new Error("A toast payload MUST contain the .message attribute!");const t=this.ids++,r=Object.assign({},{id:t,message:n.message,type:n.type||"notification",timeOut:this.timeOut,closeable:this.closeable,animationFrame:null},n.options||{});this.messages.unshift(r),this.messages.length>this.maxMessages&&this.messages.splice(this.maxMessages);const o=this;setTimeout(()=>{o.removeMessage(t)},this.timeOut)},getToastHeaderClass(n){return["toast-header",`bg-${n}`]},removeMessage(n){const t=this.messages.findIndex(r=>r.id===n);this.messages.splice(t,1)},getMessageHeaderText(n){const t=n==="danger"?"Error":"Notification";return t.charAt(0).toUpperCase()+t.slice(1)}}},ld={class:"toast-container","aria-live":"polite","aria-atomic":"true"},cd={class:"position-fixed top-0 end-0 px-2",style:{"z-index":"11"}},ud={class:"me-auto text-white"},fd=["onClick"],dd={class:"toast-body"};function pd(n,t,r,o,a,l){return st(),at("div",ld,[W("div",cd,[me(Gc,{name:"toast",tag:"div",appear:""},{default:At(()=>[(st(!0),at(Qc,null,Kc(a.messages,u=>(st(),at("div",{key:u.id,class:"toast show mt-2",role:"alert","aria-live":"assertive","aria-atomic":"true"},[W("div",{class:Da(l.getToastHeaderClass(u.type))},[W("strong",ud,wi(l.getMessageHeaderText(u.type)),1),u.closeable?(st(),at("button",{key:0,onClick:f=>l.removeMessage(u.id),type:"button",class:"me-2 mb-1 btn-close btn-close-white","data-bs-dismiss":"toast","aria-label":"Close"},null,8,fd)):Xc("",!0)],2),W("div",dd,wi(u.message),1)]))),128))]),_:1})])])}const hd=pn(ad,[["render",pd]]),md={install(n){n.config.globalProperties.$toast={error(t,r={}){this.send(t,"danger",r)},notification(t,r={}){this.send(t,"primary",r)},send(t,r,o){$n.emit("toast",{message:t,type:r,options:o})}},n.component("Toast",hd)}};var Mi={exports:{}},Ka=function(t,r){return function(){for(var a=new Array(arguments.length),l=0;l<a.length;l++)a[l]=arguments[l];return t.apply(r,a)}},gd=Ka,Fi=Object.prototype.toString,Bi=function(n){return function(t){var r=Fi.call(t);return n[r]||(n[r]=r.slice(8,-1).toLowerCase())}}(Object.create(null));function Bt(n){return n=n.toLowerCase(),function(r){return Bi(r)===n}}function ji(n){return Array.isArray(n)}function lr(n){return typeof n>"u"}function yd(n){return n!==null&&!lr(n)&&n.constructor!==null&&!lr(n.constructor)&&typeof n.constructor.isBuffer=="function"&&n.constructor.isBuffer(n)}var Xa=Bt("ArrayBuffer");function vd(n){var t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(n):t=n&&n.buffer&&Xa(n.buffer),t}function _d(n){return typeof n=="string"}function bd(n){return typeof n=="number"}function Ja(n){return n!==null&&typeof n=="object"}function or(n){if(Bi(n)!=="object")return!1;var t=Object.getPrototypeOf(n);return t===null||t===Object.prototype}var wd=Bt("Date"),Ed=Bt("File"),Ad=Bt("Blob"),Sd=Bt("FileList");function Ui(n){return Fi.call(n)==="[object Function]"}function Od(n){return Ja(n)&&Ui(n.pipe)}function Cd(n){var t="[object FormData]";return n&&(typeof FormData=="function"&&n instanceof FormData||Fi.call(n)===t||Ui(n.toString)&&n.toString()===t)}var xd=Bt("URLSearchParams");function Td(n){return n.trim?n.trim():n.replace(/^\s+|\s+$/g,"")}function Pd(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function Hi(n,t){if(!(n===null||typeof n>"u"))if(typeof n!="object"&&(n=[n]),ji(n))for(var r=0,o=n.length;r<o;r++)t.call(null,n[r],r,n);else for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&t.call(null,n[a],a,n)}function Oi(){var n={};function t(a,l){or(n[l])&&or(a)?n[l]=Oi(n[l],a):or(a)?n[l]=Oi({},a):ji(a)?n[l]=a.slice():n[l]=a}for(var r=0,o=arguments.length;r<o;r++)Hi(arguments[r],t);return n}function Rd(n,t,r){return Hi(t,function(a,l){r&&typeof a=="function"?n[l]=gd(a,r):n[l]=a}),n}function kd(n){return n.charCodeAt(0)===65279&&(n=n.slice(1)),n}function $d(n,t,r,o){n.prototype=Object.create(t.prototype,o),n.prototype.constructor=n,r&&Object.assign(n.prototype,r)}function Dd(n,t,r){var o,a,l,u={};t=t||{};do{for(o=Object.getOwnPropertyNames(n),a=o.length;a-- >0;)l=o[a],u[l]||(t[l]=n[l],u[l]=!0);n=Object.getPrototypeOf(n)}while(n&&(!r||r(n,t))&&n!==Object.prototype);return t}function Nd(n,t,r){n=String(n),(r===void 0||r>n.length)&&(r=n.length),r-=t.length;var o=n.indexOf(t,r);return o!==-1&&o===r}function Id(n){if(!n)return null;var t=n.length;if(lr(t))return null;for(var r=new Array(t);t-- >0;)r[t]=n[t];return r}var Ld=function(n){return function(t){return n&&t instanceof n}}(typeof Uint8Array<"u"&&Object.getPrototypeOf(Uint8Array)),Oe={isArray:ji,isArrayBuffer:Xa,isBuffer:yd,isFormData:Cd,isArrayBufferView:vd,isString:_d,isNumber:bd,isObject:Ja,isPlainObject:or,isUndefined:lr,isDate:wd,isFile:Ed,isBlob:Ad,isFunction:Ui,isStream:Od,isURLSearchParams:xd,isStandardBrowserEnv:Pd,forEach:Hi,merge:Oi,extend:Rd,trim:Td,stripBOM:kd,inherits:$d,toFlatObject:Dd,kindOf:Bi,kindOfTest:Bt,endsWith:Nd,toArray:Id,isTypedArray:Ld,isFileList:Sd},Zt=Oe;function Ws(n){return encodeURIComponent(n).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var Ya=function(t,r,o){if(!r)return t;var a;if(o)a=o(r);else if(Zt.isURLSearchParams(r))a=r.toString();else{var l=[];Zt.forEach(r,function(d,p){d===null||typeof d>"u"||(Zt.isArray(d)?p=p+"[]":d=[d],Zt.forEach(d,function(v){Zt.isDate(v)?v=v.toISOString():Zt.isObject(v)&&(v=JSON.stringify(v)),l.push(Ws(p)+"="+Ws(v))}))}),a=l.join("&")}if(a){var u=t.indexOf("#");u!==-1&&(t=t.slice(0,u)),t+=(t.indexOf("?")===-1?"?":"&")+a}return t},Md=Oe;function hr(){this.handlers=[]}hr.prototype.use=function(t,r,o){return this.handlers.push({fulfilled:t,rejected:r,synchronous:o?o.synchronous:!1,runWhen:o?o.runWhen:null}),this.handlers.length-1};hr.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)};hr.prototype.forEach=function(t){Md.forEach(this.handlers,function(o){o!==null&&t(o)})};var Fd=hr,Bd=Oe,jd=function(t,r){Bd.forEach(t,function(a,l){l!==r&&l.toUpperCase()===r.toUpperCase()&&(t[r]=a,delete t[l])})},Za=Oe;function ln(n,t,r,o,a){Error.call(this),this.message=n,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),o&&(this.request=o),a&&(this.response=a)}Za.inherits(ln,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var el=ln.prototype,tl={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach(function(n){tl[n]={value:n}});Object.defineProperties(ln,tl);Object.defineProperty(el,"isAxiosError",{value:!0});ln.from=function(n,t,r,o,a,l){var u=Object.create(el);return Za.toFlatObject(n,u,function(d){return d!==Error.prototype}),ln.call(u,n.message,t,r,o,a),u.name=n.name,l&&Object.assign(u,l),u};var hn=ln,nl={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Xe=Oe;function Ud(n,t){t=t||new FormData;var r=[];function o(l){return l===null?"":Xe.isDate(l)?l.toISOString():Xe.isArrayBuffer(l)||Xe.isTypedArray(l)?typeof Blob=="function"?new Blob([l]):Buffer.from(l):l}function a(l,u){if(Xe.isPlainObject(l)||Xe.isArray(l)){if(r.indexOf(l)!==-1)throw Error("Circular reference detected in "+u);r.push(l),Xe.forEach(l,function(d,p){if(!Xe.isUndefined(d)){var h=u?u+"."+p:p,v;if(d&&!u&&typeof d=="object"){if(Xe.endsWith(p,"{}"))d=JSON.stringify(d);else if(Xe.endsWith(p,"[]")&&(v=Xe.toArray(d))){v.forEach(function(g){!Xe.isUndefined(g)&&t.append(h,o(g))});return}}a(d,h)}}),r.pop()}else t.append(u,o(l))}return a(n),t}var rl=Ud,Xr,zs;function Hd(){if(zs)return Xr;zs=1;var n=hn;return Xr=function(r,o,a){var l=a.config.validateStatus;!a.status||!l||l(a.status)?r(a):o(new n("Request failed with status code "+a.status,[n.ERR_BAD_REQUEST,n.ERR_BAD_RESPONSE][Math.floor(a.status/100)-4],a.config,a.request,a))},Xr}var Jr,Vs;function qd(){if(Vs)return Jr;Vs=1;var n=Oe;return Jr=n.isStandardBrowserEnv()?function(){return{write:function(o,a,l,u,f,d){var p=[];p.push(o+"="+encodeURIComponent(a)),n.isNumber(l)&&p.push("expires="+new Date(l).toGMTString()),n.isString(u)&&p.push("path="+u),n.isString(f)&&p.push("domain="+f),d===!0&&p.push("secure"),document.cookie=p.join("; ")},read:function(o){var a=document.cookie.match(new RegExp("(^|;\\s*)("+o+")=([^;]*)"));return a?decodeURIComponent(a[3]):null},remove:function(o){this.write(o,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),Jr}var Wd=function(t){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)},zd=function(t,r){return r?t.replace(/\/+$/,"")+"/"+r.replace(/^\/+/,""):t},Vd=Wd,Gd=zd,il=function(t,r){return t&&!Vd(r)?Gd(t,r):r},Yr,Gs;function Qd(){if(Gs)return Yr;Gs=1;var n=Oe,t=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return Yr=function(o){var a={},l,u,f;return o&&n.forEach(o.split(`
`),function(p){if(f=p.indexOf(":"),l=n.trim(p.substr(0,f)).toLowerCase(),u=n.trim(p.substr(f+1)),l){if(a[l]&&t.indexOf(l)>=0)return;l==="set-cookie"?a[l]=(a[l]?a[l]:[]).concat([u]):a[l]=a[l]?a[l]+", "+u:u}}),a},Yr}var Zr,Qs;function Kd(){if(Qs)return Zr;Qs=1;var n=Oe;return Zr=n.isStandardBrowserEnv()?function(){var r=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a"),a;function l(u){var f=u;return r&&(o.setAttribute("href",f),f=o.href),o.setAttribute("href",f),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:o.pathname.charAt(0)==="/"?o.pathname:"/"+o.pathname}}return a=l(window.location.href),function(f){var d=n.isString(f)?l(f):f;return d.protocol===a.protocol&&d.host===a.host}}():function(){return function(){return!0}}(),Zr}var ei,Ks;function mr(){if(Ks)return ei;Ks=1;var n=hn,t=Oe;function r(o){n.call(this,o??"canceled",n.ERR_CANCELED),this.name="CanceledError"}return t.inherits(r,n,{__CANCEL__:!0}),ei=r,ei}var ti,Xs;function Xd(){return Xs||(Xs=1,ti=function(t){var r=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return r&&r[1]||""}),ti}var ni,Js;function Ys(){if(Js)return ni;Js=1;var n=Oe,t=Hd(),r=qd(),o=Ya,a=il,l=Qd(),u=Kd(),f=nl,d=hn,p=mr(),h=Xd();return ni=function(g){return new Promise(function(P,M){var I=g.data,O=g.headers,$=g.responseType,K;function se(){g.cancelToken&&g.cancelToken.unsubscribe(K),g.signal&&g.signal.removeEventListener("abort",K)}n.isFormData(I)&&n.isStandardBrowserEnv()&&delete O["Content-Type"];var D=new XMLHttpRequest;if(g.auth){var he=g.auth.username||"",Ee=g.auth.password?unescape(encodeURIComponent(g.auth.password)):"";O.Authorization="Basic "+btoa(he+":"+Ee)}var Te=a(g.baseURL,g.url);D.open(g.method.toUpperCase(),o(Te,g.params,g.paramsSerializer),!0),D.timeout=g.timeout;function Ae(){if(D){var le="getAllResponseHeaders"in D?l(D.getAllResponseHeaders()):null,ie=!$||$==="text"||$==="json"?D.responseText:D.response,fe={data:ie,status:D.status,statusText:D.statusText,headers:le,config:g,request:D};t(function(Re){P(Re),se()},function(Re){M(Re),se()},fe),D=null}}if("onloadend"in D?D.onloadend=Ae:D.onreadystatechange=function(){!D||D.readyState!==4||D.status===0&&!(D.responseURL&&D.responseURL.indexOf("file:")===0)||setTimeout(Ae)},D.onabort=function(){D&&(M(new d("Request aborted",d.ECONNABORTED,g,D)),D=null)},D.onerror=function(){M(new d("Network Error",d.ERR_NETWORK,g,D,D)),D=null},D.ontimeout=function(){var ie=g.timeout?"timeout of "+g.timeout+"ms exceeded":"timeout exceeded",fe=g.transitional||f;g.timeoutErrorMessage&&(ie=g.timeoutErrorMessage),M(new d(ie,fe.clarifyTimeoutError?d.ETIMEDOUT:d.ECONNABORTED,g,D)),D=null},n.isStandardBrowserEnv()){var Pe=(g.withCredentials||u(Te))&&g.xsrfCookieName?r.read(g.xsrfCookieName):void 0;Pe&&(O[g.xsrfHeaderName]=Pe)}"setRequestHeader"in D&&n.forEach(O,function(ie,fe){typeof I>"u"&&fe.toLowerCase()==="content-type"?delete O[fe]:D.setRequestHeader(fe,ie)}),n.isUndefined(g.withCredentials)||(D.withCredentials=!!g.withCredentials),$&&$!=="json"&&(D.responseType=g.responseType),typeof g.onDownloadProgress=="function"&&D.addEventListener("progress",g.onDownloadProgress),typeof g.onUploadProgress=="function"&&D.upload&&D.upload.addEventListener("progress",g.onUploadProgress),(g.cancelToken||g.signal)&&(K=function(le){D&&(M(!le||le&&le.type?new p:le),D.abort(),D=null)},g.cancelToken&&g.cancelToken.subscribe(K),g.signal&&(g.signal.aborted?K():g.signal.addEventListener("abort",K))),I||(I=null);var Ce=h(Te);if(Ce&&["http","https","file"].indexOf(Ce)===-1){M(new d("Unsupported protocol "+Ce+":",d.ERR_BAD_REQUEST,g));return}D.send(I)})},ni}var ri,Zs;function Jd(){return Zs||(Zs=1,ri=null),ri}var be=Oe,ea=jd,ta=hn,Yd=nl,Zd=rl,ep={"Content-Type":"application/x-www-form-urlencoded"};function na(n,t){!be.isUndefined(n)&&be.isUndefined(n["Content-Type"])&&(n["Content-Type"]=t)}function tp(){var n;return(typeof XMLHttpRequest<"u"||typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]")&&(n=Ys()),n}function np(n,t,r){if(be.isString(n))try{return(t||JSON.parse)(n),be.trim(n)}catch(o){if(o.name!=="SyntaxError")throw o}return(r||JSON.stringify)(n)}var gr={transitional:Yd,adapter:tp(),transformRequest:[function(t,r){if(ea(r,"Accept"),ea(r,"Content-Type"),be.isFormData(t)||be.isArrayBuffer(t)||be.isBuffer(t)||be.isStream(t)||be.isFile(t)||be.isBlob(t))return t;if(be.isArrayBufferView(t))return t.buffer;if(be.isURLSearchParams(t))return na(r,"application/x-www-form-urlencoded;charset=utf-8"),t.toString();var o=be.isObject(t),a=r&&r["Content-Type"],l;if((l=be.isFileList(t))||o&&a==="multipart/form-data"){var u=this.env&&this.env.FormData;return Zd(l?{"files[]":t}:t,u&&new u)}else if(o||a==="application/json")return na(r,"application/json"),np(t);return t}],transformResponse:[function(t){var r=this.transitional||gr.transitional,o=r&&r.silentJSONParsing,a=r&&r.forcedJSONParsing,l=!o&&this.responseType==="json";if(l||a&&be.isString(t)&&t.length)try{return JSON.parse(t)}catch(u){if(l)throw u.name==="SyntaxError"?ta.from(u,ta.ERR_BAD_RESPONSE,this,null,this.response):u}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Jd()},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};be.forEach(["delete","get","head"],function(t){gr.headers[t]={}});be.forEach(["post","put","patch"],function(t){gr.headers[t]=be.merge(ep)});var qi=gr,rp=Oe,ip=qi,op=function(t,r,o){var a=this||ip;return rp.forEach(o,function(u){t=u.call(a,t,r)}),t},ii,ra;function ol(){return ra||(ra=1,ii=function(t){return!!(t&&t.__CANCEL__)}),ii}var ia=Oe,oi=op,sp=ol(),ap=qi,lp=mr();function si(n){if(n.cancelToken&&n.cancelToken.throwIfRequested(),n.signal&&n.signal.aborted)throw new lp}var cp=function(t){si(t),t.headers=t.headers||{},t.data=oi.call(t,t.data,t.headers,t.transformRequest),t.headers=ia.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),ia.forEach(["delete","get","head","post","put","patch","common"],function(a){delete t.headers[a]});var r=t.adapter||ap.adapter;return r(t).then(function(a){return si(t),a.data=oi.call(t,a.data,a.headers,t.transformResponse),a},function(a){return sp(a)||(si(t),a&&a.response&&(a.response.data=oi.call(t,a.response.data,a.response.headers,t.transformResponse))),Promise.reject(a)})},Ue=Oe,sl=function(t,r){r=r||{};var o={};function a(h,v){return Ue.isPlainObject(h)&&Ue.isPlainObject(v)?Ue.merge(h,v):Ue.isPlainObject(v)?Ue.merge({},v):Ue.isArray(v)?v.slice():v}function l(h){if(Ue.isUndefined(r[h])){if(!Ue.isUndefined(t[h]))return a(void 0,t[h])}else return a(t[h],r[h])}function u(h){if(!Ue.isUndefined(r[h]))return a(void 0,r[h])}function f(h){if(Ue.isUndefined(r[h])){if(!Ue.isUndefined(t[h]))return a(void 0,t[h])}else return a(void 0,r[h])}function d(h){if(h in r)return a(t[h],r[h]);if(h in t)return a(void 0,t[h])}var p={url:u,method:u,data:u,baseURL:f,transformRequest:f,transformResponse:f,paramsSerializer:f,timeout:f,timeoutMessage:f,withCredentials:f,adapter:f,responseType:f,xsrfCookieName:f,xsrfHeaderName:f,onUploadProgress:f,onDownloadProgress:f,decompress:f,maxContentLength:f,maxBodyLength:f,beforeRedirect:f,transport:f,httpAgent:f,httpsAgent:f,cancelToken:f,socketPath:f,responseEncoding:f,validateStatus:d};return Ue.forEach(Object.keys(t).concat(Object.keys(r)),function(v){var g=p[v]||l,S=g(v);Ue.isUndefined(S)&&g!==d||(o[v]=S)}),o},ai,oa;function al(){return oa||(oa=1,ai={version:"0.27.2"}),ai}var up=al().version,wt=hn,Wi={};["object","boolean","number","function","string","symbol"].forEach(function(n,t){Wi[n]=function(o){return typeof o===n||"a"+(t<1?"n ":" ")+n}});var sa={};Wi.transitional=function(t,r,o){function a(l,u){return"[Axios v"+up+"] Transitional option '"+l+"'"+u+(o?". "+o:"")}return function(l,u,f){if(t===!1)throw new wt(a(u," has been removed"+(r?" in "+r:"")),wt.ERR_DEPRECATED);return r&&!sa[u]&&(sa[u]=!0,console.warn(a(u," has been deprecated since v"+r+" and will be removed in the near future"))),t?t(l,u,f):!0}};function fp(n,t,r){if(typeof n!="object")throw new wt("options must be an object",wt.ERR_BAD_OPTION_VALUE);for(var o=Object.keys(n),a=o.length;a-- >0;){var l=o[a],u=t[l];if(u){var f=n[l],d=f===void 0||u(f,l,n);if(d!==!0)throw new wt("option "+l+" must be "+d,wt.ERR_BAD_OPTION_VALUE);continue}if(r!==!0)throw new wt("Unknown option "+l,wt.ERR_BAD_OPTION)}}var dp={assertOptions:fp,validators:Wi},ll=Oe,pp=Ya,aa=Fd,la=cp,yr=sl,hp=il,cl=dp,en=cl.validators;function cn(n){this.defaults=n,this.interceptors={request:new aa,response:new aa}}cn.prototype.request=function(t,r){typeof t=="string"?(r=r||{},r.url=t):r=t||{},r=yr(this.defaults,r),r.method?r.method=r.method.toLowerCase():this.defaults.method?r.method=this.defaults.method.toLowerCase():r.method="get";var o=r.transitional;o!==void 0&&cl.assertOptions(o,{silentJSONParsing:en.transitional(en.boolean),forcedJSONParsing:en.transitional(en.boolean),clarifyTimeoutError:en.transitional(en.boolean)},!1);var a=[],l=!0;this.interceptors.request.forEach(function(S){typeof S.runWhen=="function"&&S.runWhen(r)===!1||(l=l&&S.synchronous,a.unshift(S.fulfilled,S.rejected))});var u=[];this.interceptors.response.forEach(function(S){u.push(S.fulfilled,S.rejected)});var f;if(!l){var d=[la,void 0];for(Array.prototype.unshift.apply(d,a),d=d.concat(u),f=Promise.resolve(r);d.length;)f=f.then(d.shift(),d.shift());return f}for(var p=r;a.length;){var h=a.shift(),v=a.shift();try{p=h(p)}catch(g){v(g);break}}try{f=la(p)}catch(g){return Promise.reject(g)}for(;u.length;)f=f.then(u.shift(),u.shift());return f};cn.prototype.getUri=function(t){t=yr(this.defaults,t);var r=hp(t.baseURL,t.url);return pp(r,t.params,t.paramsSerializer)};ll.forEach(["delete","get","head","options"],function(t){cn.prototype[t]=function(r,o){return this.request(yr(o||{},{method:t,url:r,data:(o||{}).data}))}});ll.forEach(["post","put","patch"],function(t){function r(o){return function(l,u,f){return this.request(yr(f||{},{method:t,headers:o?{"Content-Type":"multipart/form-data"}:{},url:l,data:u}))}}cn.prototype[t]=r(),cn.prototype[t+"Form"]=r(!0)});var mp=cn,li,ca;function gp(){if(ca)return li;ca=1;var n=mr();function t(r){if(typeof r!="function")throw new TypeError("executor must be a function.");var o;this.promise=new Promise(function(u){o=u});var a=this;this.promise.then(function(l){if(a._listeners){var u,f=a._listeners.length;for(u=0;u<f;u++)a._listeners[u](l);a._listeners=null}}),this.promise.then=function(l){var u,f=new Promise(function(d){a.subscribe(d),u=d}).then(l);return f.cancel=function(){a.unsubscribe(u)},f},r(function(u){a.reason||(a.reason=new n(u),o(a.reason))})}return t.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},t.prototype.subscribe=function(o){if(this.reason){o(this.reason);return}this._listeners?this._listeners.push(o):this._listeners=[o]},t.prototype.unsubscribe=function(o){if(this._listeners){var a=this._listeners.indexOf(o);a!==-1&&this._listeners.splice(a,1)}},t.source=function(){var o,a=new t(function(u){o=u});return{token:a,cancel:o}},li=t,li}var ci,ua;function yp(){return ua||(ua=1,ci=function(t){return function(o){return t.apply(null,o)}}),ci}var ui,fa;function vp(){if(fa)return ui;fa=1;var n=Oe;return ui=function(r){return n.isObject(r)&&r.isAxiosError===!0},ui}var da=Oe,_p=Ka,sr=mp,bp=sl,wp=qi;function ul(n){var t=new sr(n),r=_p(sr.prototype.request,t);return da.extend(r,sr.prototype,t),da.extend(r,t),r.create=function(a){return ul(bp(n,a))},r}var Le=ul(wp);Le.Axios=sr;Le.CanceledError=mr();Le.CancelToken=gp();Le.isCancel=ol();Le.VERSION=al().version;Le.toFormData=rl;Le.AxiosError=hn;Le.Cancel=Le.CanceledError;Le.all=function(t){return Promise.all(t)};Le.spread=yp();Le.isAxiosError=vp();Mi.exports=Le;Mi.exports.default=Le;var Ep=Mi.exports,Ap=Ep;const He=Ma(Ap);var Sp=function(){if(typeof Symbol!="function"||typeof Object.getOwnPropertySymbols!="function")return!1;if(typeof Symbol.iterator=="symbol")return!0;var t={},r=Symbol("test"),o=Object(r);if(typeof r=="string"||Object.prototype.toString.call(r)!=="[object Symbol]"||Object.prototype.toString.call(o)!=="[object Symbol]")return!1;var a=42;t[r]=a;for(r in t)return!1;if(typeof Object.keys=="function"&&Object.keys(t).length!==0||typeof Object.getOwnPropertyNames=="function"&&Object.getOwnPropertyNames(t).length!==0)return!1;var l=Object.getOwnPropertySymbols(t);if(l.length!==1||l[0]!==r||!Object.prototype.propertyIsEnumerable.call(t,r))return!1;if(typeof Object.getOwnPropertyDescriptor=="function"){var u=Object.getOwnPropertyDescriptor(t,r);if(u.value!==a||u.enumerable!==!0)return!1}return!0},pa=typeof Symbol<"u"&&Symbol,Op=Sp,Cp=function(){return typeof pa!="function"||typeof Symbol!="function"||typeof pa("foo")!="symbol"||typeof Symbol("bar")!="symbol"?!1:Op()},ha={foo:{}},xp=Object,Tp=function(){return{__proto__:ha}.foo===ha.foo&&!({__proto__:null}instanceof xp)},Pp="Function.prototype.bind called on incompatible ",fi=Array.prototype.slice,Rp=Object.prototype.toString,kp="[object Function]",$p=function(t){var r=this;if(typeof r!="function"||Rp.call(r)!==kp)throw new TypeError(Pp+r);for(var o=fi.call(arguments,1),a,l=function(){if(this instanceof a){var h=r.apply(this,o.concat(fi.call(arguments)));return Object(h)===h?h:this}else return r.apply(t,o.concat(fi.call(arguments)))},u=Math.max(0,r.length-o.length),f=[],d=0;d<u;d++)f.push("$"+d);if(a=Function("binder","return function ("+f.join(",")+"){ return binder.apply(this,arguments); }")(l),r.prototype){var p=function(){};p.prototype=r.prototype,a.prototype=new p,p.prototype=null}return a},Dp=$p,zi=Function.prototype.bind||Dp,Np=zi,Ip=Np.call(Function.call,Object.prototype.hasOwnProperty),G,un=SyntaxError,fl=Function,on=TypeError,di=function(n){try{return fl('"use strict"; return ('+n+").constructor;")()}catch{}},Mt=Object.getOwnPropertyDescriptor;if(Mt)try{Mt({},"")}catch{Mt=null}var pi=function(){throw new on},Lp=Mt?function(){try{return arguments.callee,pi}catch{try{return Mt(arguments,"callee").get}catch{return pi}}}():pi,tn=Cp(),Mp=Tp(),we=Object.getPrototypeOf||(Mp?function(n){return n.__proto__}:null),rn={},Fp=typeof Uint8Array>"u"||!we?G:we(Uint8Array),Ft={"%AggregateError%":typeof AggregateError>"u"?G:AggregateError,"%Array%":Array,"%ArrayBuffer%":typeof ArrayBuffer>"u"?G:ArrayBuffer,"%ArrayIteratorPrototype%":tn&&we?we([][Symbol.iterator]()):G,"%AsyncFromSyncIteratorPrototype%":G,"%AsyncFunction%":rn,"%AsyncGenerator%":rn,"%AsyncGeneratorFunction%":rn,"%AsyncIteratorPrototype%":rn,"%Atomics%":typeof Atomics>"u"?G:Atomics,"%BigInt%":typeof BigInt>"u"?G:BigInt,"%BigInt64Array%":typeof BigInt64Array>"u"?G:BigInt64Array,"%BigUint64Array%":typeof BigUint64Array>"u"?G:BigUint64Array,"%Boolean%":Boolean,"%DataView%":typeof DataView>"u"?G:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":typeof Float32Array>"u"?G:Float32Array,"%Float64Array%":typeof Float64Array>"u"?G:Float64Array,"%FinalizationRegistry%":typeof FinalizationRegistry>"u"?G:FinalizationRegistry,"%Function%":fl,"%GeneratorFunction%":rn,"%Int8Array%":typeof Int8Array>"u"?G:Int8Array,"%Int16Array%":typeof Int16Array>"u"?G:Int16Array,"%Int32Array%":typeof Int32Array>"u"?G:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":tn&&we?we(we([][Symbol.iterator]())):G,"%JSON%":typeof JSON=="object"?JSON:G,"%Map%":typeof Map>"u"?G:Map,"%MapIteratorPrototype%":typeof Map>"u"||!tn||!we?G:we(new Map()[Symbol.iterator]()),"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":typeof Promise>"u"?G:Promise,"%Proxy%":typeof Proxy>"u"?G:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":typeof Reflect>"u"?G:Reflect,"%RegExp%":RegExp,"%Set%":typeof Set>"u"?G:Set,"%SetIteratorPrototype%":typeof Set>"u"||!tn||!we?G:we(new Set()[Symbol.iterator]()),"%SharedArrayBuffer%":typeof SharedArrayBuffer>"u"?G:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":tn&&we?we(""[Symbol.iterator]()):G,"%Symbol%":tn?Symbol:G,"%SyntaxError%":un,"%ThrowTypeError%":Lp,"%TypedArray%":Fp,"%TypeError%":on,"%Uint8Array%":typeof Uint8Array>"u"?G:Uint8Array,"%Uint8ClampedArray%":typeof Uint8ClampedArray>"u"?G:Uint8ClampedArray,"%Uint16Array%":typeof Uint16Array>"u"?G:Uint16Array,"%Uint32Array%":typeof Uint32Array>"u"?G:Uint32Array,"%URIError%":URIError,"%WeakMap%":typeof WeakMap>"u"?G:WeakMap,"%WeakRef%":typeof WeakRef>"u"?G:WeakRef,"%WeakSet%":typeof WeakSet>"u"?G:WeakSet};if(we)try{null.error}catch(n){var Bp=we(we(n));Ft["%Error.prototype%"]=Bp}var jp=function n(t){var r;if(t==="%AsyncFunction%")r=di("async function () {}");else if(t==="%GeneratorFunction%")r=di("function* () {}");else if(t==="%AsyncGeneratorFunction%")r=di("async function* () {}");else if(t==="%AsyncGenerator%"){var o=n("%AsyncGeneratorFunction%");o&&(r=o.prototype)}else if(t==="%AsyncIteratorPrototype%"){var a=n("%AsyncGenerator%");a&&we&&(r=we(a.prototype))}return Ft[t]=r,r},ma={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},Nn=zi,cr=Ip,Up=Nn.call(Function.call,Array.prototype.concat),Hp=Nn.call(Function.apply,Array.prototype.splice),ga=Nn.call(Function.call,String.prototype.replace),ur=Nn.call(Function.call,String.prototype.slice),qp=Nn.call(Function.call,RegExp.prototype.exec),Wp=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,zp=/\\(\\)?/g,Vp=function(t){var r=ur(t,0,1),o=ur(t,-1);if(r==="%"&&o!=="%")throw new un("invalid intrinsic syntax, expected closing `%`");if(o==="%"&&r!=="%")throw new un("invalid intrinsic syntax, expected opening `%`");var a=[];return ga(t,Wp,function(l,u,f,d){a[a.length]=f?ga(d,zp,"$1"):u||l}),a},Gp=function(t,r){var o=t,a;if(cr(ma,o)&&(a=ma[o],o="%"+a[0]+"%"),cr(Ft,o)){var l=Ft[o];if(l===rn&&(l=jp(o)),typeof l>"u"&&!r)throw new on("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:a,name:o,value:l}}throw new un("intrinsic "+t+" does not exist!")},Vi=function(t,r){if(typeof t!="string"||t.length===0)throw new on("intrinsic name must be a non-empty string");if(arguments.length>1&&typeof r!="boolean")throw new on('"allowMissing" argument must be a boolean');if(qp(/^%?[^%]*%?$/,t)===null)throw new un("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var o=Vp(t),a=o.length>0?o[0]:"",l=Gp("%"+a+"%",r),u=l.name,f=l.value,d=!1,p=l.alias;p&&(a=p[0],Hp(o,Up([0,1],p)));for(var h=1,v=!0;h<o.length;h+=1){var g=o[h],S=ur(g,0,1),P=ur(g,-1);if((S==='"'||S==="'"||S==="`"||P==='"'||P==="'"||P==="`")&&S!==P)throw new un("property names with quotes must have matching quotes");if((g==="constructor"||!v)&&(d=!0),a+="."+g,u="%"+a+"%",cr(Ft,u))f=Ft[u];else if(f!=null){if(!(g in f)){if(!r)throw new on("base intrinsic for "+t+" exists, but the property is not available.");return}if(Mt&&h+1>=o.length){var M=Mt(f,g);v=!!M,v&&"get"in M&&!("originalValue"in M.get)?f=M.get:f=f[g]}else v=cr(f,g),f=f[g];v&&!d&&(Ft[u]=f)}}return f},dl={exports:{}};(function(n){var t=zi,r=Vi,o=r("%Function.prototype.apply%"),a=r("%Function.prototype.call%"),l=r("%Reflect.apply%",!0)||t.call(a,o),u=r("%Object.getOwnPropertyDescriptor%",!0),f=r("%Object.defineProperty%",!0),d=r("%Math.max%");if(f)try{f({},"a",{value:1})}catch{f=null}n.exports=function(v){var g=l(t,a,arguments);if(u&&f){var S=u(g,"length");S.configurable&&f(g,"length",{value:1+d(0,v.length-(arguments.length-1))})}return g};var p=function(){return l(t,o,arguments)};f?f(n.exports,"apply",{value:p}):n.exports.apply=p})(dl);var Qp=dl.exports,pl=Vi,hl=Qp,Kp=hl(pl("String.prototype.indexOf")),Xp=function(t,r){var o=pl(t,!!r);return typeof o=="function"&&Kp(t,".prototype.")>-1?hl(o):o};const Jp={},Yp=Object.freeze(Object.defineProperty({__proto__:null,default:Jp},Symbol.toStringTag,{value:"Module"})),Zp=Jc(Yp);var Gi=typeof Map=="function"&&Map.prototype,hi=Object.getOwnPropertyDescriptor&&Gi?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,fr=Gi&&hi&&typeof hi.get=="function"?hi.get:null,ya=Gi&&Map.prototype.forEach,Qi=typeof Set=="function"&&Set.prototype,mi=Object.getOwnPropertyDescriptor&&Qi?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,dr=Qi&&mi&&typeof mi.get=="function"?mi.get:null,va=Qi&&Set.prototype.forEach,eh=typeof WeakMap=="function"&&WeakMap.prototype,Tn=eh?WeakMap.prototype.has:null,th=typeof WeakSet=="function"&&WeakSet.prototype,Pn=th?WeakSet.prototype.has:null,nh=typeof WeakRef=="function"&&WeakRef.prototype,_a=nh?WeakRef.prototype.deref:null,rh=Boolean.prototype.valueOf,ih=Object.prototype.toString,oh=Function.prototype.toString,sh=String.prototype.match,Ki=String.prototype.slice,St=String.prototype.replace,ah=String.prototype.toUpperCase,ba=String.prototype.toLowerCase,ml=RegExp.prototype.test,wa=Array.prototype.concat,ot=Array.prototype.join,lh=Array.prototype.slice,Ea=Math.floor,Ci=typeof BigInt=="function"?BigInt.prototype.valueOf:null,gi=Object.getOwnPropertySymbols,xi=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Symbol.prototype.toString:null,fn=typeof Symbol=="function"&&typeof Symbol.iterator=="object",xe=typeof Symbol=="function"&&Symbol.toStringTag&&(typeof Symbol.toStringTag===fn||"symbol")?Symbol.toStringTag:null,gl=Object.prototype.propertyIsEnumerable,Aa=(typeof Reflect=="function"?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(n){return n.__proto__}:null);function Sa(n,t){if(n===1/0||n===-1/0||n!==n||n&&n>-1e3&&n<1e3||ml.call(/e/,t))return t;var r=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if(typeof n=="number"){var o=n<0?-Ea(-n):Ea(n);if(o!==n){var a=String(o),l=Ki.call(t,a.length+1);return St.call(a,r,"$&_")+"."+St.call(St.call(l,/([0-9]{3})/g,"$&_"),/_$/,"")}}return St.call(t,r,"$&_")}var Ti=Zp,Oa=Ti.custom,Ca=vl(Oa)?Oa:null,ch=function n(t,r,o,a){var l=r||{};if(Et(l,"quoteStyle")&&l.quoteStyle!=="single"&&l.quoteStyle!=="double")throw new TypeError('option "quoteStyle" must be "single" or "double"');if(Et(l,"maxStringLength")&&(typeof l.maxStringLength=="number"?l.maxStringLength<0&&l.maxStringLength!==1/0:l.maxStringLength!==null))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var u=Et(l,"customInspect")?l.customInspect:!0;if(typeof u!="boolean"&&u!=="symbol")throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(Et(l,"indent")&&l.indent!==null&&l.indent!=="	"&&!(parseInt(l.indent,10)===l.indent&&l.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(Et(l,"numericSeparator")&&typeof l.numericSeparator!="boolean")throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var f=l.numericSeparator;if(typeof t>"u")return"undefined";if(t===null)return"null";if(typeof t=="boolean")return t?"true":"false";if(typeof t=="string")return bl(t,l);if(typeof t=="number"){if(t===0)return 1/0/t>0?"0":"-0";var d=String(t);return f?Sa(t,d):d}if(typeof t=="bigint"){var p=String(t)+"n";return f?Sa(t,p):p}var h=typeof l.depth>"u"?5:l.depth;if(typeof o>"u"&&(o=0),o>=h&&h>0&&typeof t=="object")return Pi(t)?"[Array]":"[Object]";var v=xh(l,o);if(typeof a>"u")a=[];else if(_l(a,t)>=0)return"[Circular]";function g(ie,fe,ge){if(fe&&(a=lh.call(a),a.push(fe)),ge){var Re={depth:l.depth};return Et(l,"quoteStyle")&&(Re.quoteStyle=l.quoteStyle),n(ie,Re,o+1,a)}return n(ie,l,o+1,a)}if(typeof t=="function"&&!xa(t)){var S=vh(t),P=nr(t,g);return"[Function"+(S?": "+S:" (anonymous)")+"]"+(P.length>0?" { "+ot.call(P,", ")+" }":"")}if(vl(t)){var M=fn?St.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):xi.call(t);return typeof t=="object"&&!fn?Sn(M):M}if(Sh(t)){for(var I="<"+ba.call(String(t.nodeName)),O=t.attributes||[],$=0;$<O.length;$++)I+=" "+O[$].name+"="+yl(uh(O[$].value),"double",l);return I+=">",t.childNodes&&t.childNodes.length&&(I+="..."),I+="</"+ba.call(String(t.nodeName))+">",I}if(Pi(t)){if(t.length===0)return"[]";var K=nr(t,g);return v&&!Ch(K)?"["+Ri(K,v)+"]":"[ "+ot.call(K,", ")+" ]"}if(dh(t)){var se=nr(t,g);return!("cause"in Error.prototype)&&"cause"in t&&!gl.call(t,"cause")?"{ ["+String(t)+"] "+ot.call(wa.call("[cause]: "+g(t.cause),se),", ")+" }":se.length===0?"["+String(t)+"]":"{ ["+String(t)+"] "+ot.call(se,", ")+" }"}if(typeof t=="object"&&u){if(Ca&&typeof t[Ca]=="function"&&Ti)return Ti(t,{depth:h-o});if(u!=="symbol"&&typeof t.inspect=="function")return t.inspect()}if(_h(t)){var D=[];return ya&&ya.call(t,function(ie,fe){D.push(g(fe,t,!0)+" => "+g(ie,t))}),Ta("Map",fr.call(t),D,v)}if(Eh(t)){var he=[];return va&&va.call(t,function(ie){he.push(g(ie,t))}),Ta("Set",dr.call(t),he,v)}if(bh(t))return yi("WeakMap");if(Ah(t))return yi("WeakSet");if(wh(t))return yi("WeakRef");if(hh(t))return Sn(g(Number(t)));if(gh(t))return Sn(g(Ci.call(t)));if(mh(t))return Sn(rh.call(t));if(ph(t))return Sn(g(String(t)));if(!fh(t)&&!xa(t)){var Ee=nr(t,g),Te=Aa?Aa(t)===Object.prototype:t instanceof Object||t.constructor===Object,Ae=t instanceof Object?"":"null prototype",Pe=!Te&&xe&&Object(t)===t&&xe in t?Ki.call(Ot(t),8,-1):Ae?"Object":"",Ce=Te||typeof t.constructor!="function"?"":t.constructor.name?t.constructor.name+" ":"",le=Ce+(Pe||Ae?"["+ot.call(wa.call([],Pe||[],Ae||[]),": ")+"] ":"");return Ee.length===0?le+"{}":v?le+"{"+Ri(Ee,v)+"}":le+"{ "+ot.call(Ee,", ")+" }"}return String(t)};function yl(n,t,r){var o=(r.quoteStyle||t)==="double"?'"':"'";return o+n+o}function uh(n){return St.call(String(n),/"/g,"&quot;")}function Pi(n){return Ot(n)==="[object Array]"&&(!xe||!(typeof n=="object"&&xe in n))}function fh(n){return Ot(n)==="[object Date]"&&(!xe||!(typeof n=="object"&&xe in n))}function xa(n){return Ot(n)==="[object RegExp]"&&(!xe||!(typeof n=="object"&&xe in n))}function dh(n){return Ot(n)==="[object Error]"&&(!xe||!(typeof n=="object"&&xe in n))}function ph(n){return Ot(n)==="[object String]"&&(!xe||!(typeof n=="object"&&xe in n))}function hh(n){return Ot(n)==="[object Number]"&&(!xe||!(typeof n=="object"&&xe in n))}function mh(n){return Ot(n)==="[object Boolean]"&&(!xe||!(typeof n=="object"&&xe in n))}function vl(n){if(fn)return n&&typeof n=="object"&&n instanceof Symbol;if(typeof n=="symbol")return!0;if(!n||typeof n!="object"||!xi)return!1;try{return xi.call(n),!0}catch{}return!1}function gh(n){if(!n||typeof n!="object"||!Ci)return!1;try{return Ci.call(n),!0}catch{}return!1}var yh=Object.prototype.hasOwnProperty||function(n){return n in this};function Et(n,t){return yh.call(n,t)}function Ot(n){return ih.call(n)}function vh(n){if(n.name)return n.name;var t=sh.call(oh.call(n),/^function\s*([\w$]+)/);return t?t[1]:null}function _l(n,t){if(n.indexOf)return n.indexOf(t);for(var r=0,o=n.length;r<o;r++)if(n[r]===t)return r;return-1}function _h(n){if(!fr||!n||typeof n!="object")return!1;try{fr.call(n);try{dr.call(n)}catch{return!0}return n instanceof Map}catch{}return!1}function bh(n){if(!Tn||!n||typeof n!="object")return!1;try{Tn.call(n,Tn);try{Pn.call(n,Pn)}catch{return!0}return n instanceof WeakMap}catch{}return!1}function wh(n){if(!_a||!n||typeof n!="object")return!1;try{return _a.call(n),!0}catch{}return!1}function Eh(n){if(!dr||!n||typeof n!="object")return!1;try{dr.call(n);try{fr.call(n)}catch{return!0}return n instanceof Set}catch{}return!1}function Ah(n){if(!Pn||!n||typeof n!="object")return!1;try{Pn.call(n,Pn);try{Tn.call(n,Tn)}catch{return!0}return n instanceof WeakSet}catch{}return!1}function Sh(n){return!n||typeof n!="object"?!1:typeof HTMLElement<"u"&&n instanceof HTMLElement?!0:typeof n.nodeName=="string"&&typeof n.getAttribute=="function"}function bl(n,t){if(n.length>t.maxStringLength){var r=n.length-t.maxStringLength,o="... "+r+" more character"+(r>1?"s":"");return bl(Ki.call(n,0,t.maxStringLength),t)+o}var a=St.call(St.call(n,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,Oh);return yl(a,"single",t)}function Oh(n){var t=n.charCodeAt(0),r={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return r?"\\"+r:"\\x"+(t<16?"0":"")+ah.call(t.toString(16))}function Sn(n){return"Object("+n+")"}function yi(n){return n+" { ? }"}function Ta(n,t,r,o){var a=o?Ri(r,o):ot.call(r,", ");return n+" ("+t+") {"+a+"}"}function Ch(n){for(var t=0;t<n.length;t++)if(_l(n[t],`
`)>=0)return!1;return!0}function xh(n,t){var r;if(n.indent==="	")r="	";else if(typeof n.indent=="number"&&n.indent>0)r=ot.call(Array(n.indent+1)," ");else return null;return{base:r,prev:ot.call(Array(t+1),r)}}function Ri(n,t){if(n.length===0)return"";var r=`
`+t.prev+t.base;return r+ot.call(n,","+r)+`
`+t.prev}function nr(n,t){var r=Pi(n),o=[];if(r){o.length=n.length;for(var a=0;a<n.length;a++)o[a]=Et(n,a)?t(n[a],n):""}var l=typeof gi=="function"?gi(n):[],u;if(fn){u={};for(var f=0;f<l.length;f++)u["$"+l[f]]=l[f]}for(var d in n)Et(n,d)&&(r&&String(Number(d))===d&&d<n.length||fn&&u["$"+d]instanceof Symbol||(ml.call(/[^\w$]/,d)?o.push(t(d,n)+": "+t(n[d],n)):o.push(d+": "+t(n[d],n))));if(typeof gi=="function")for(var p=0;p<l.length;p++)gl.call(n,l[p])&&o.push("["+t(l[p])+"]: "+t(n[l[p]],n));return o}var Xi=Vi,mn=Xp,Th=ch,Ph=Xi("%TypeError%"),rr=Xi("%WeakMap%",!0),ir=Xi("%Map%",!0),Rh=mn("WeakMap.prototype.get",!0),kh=mn("WeakMap.prototype.set",!0),$h=mn("WeakMap.prototype.has",!0),Dh=mn("Map.prototype.get",!0),Nh=mn("Map.prototype.set",!0),Ih=mn("Map.prototype.has",!0),Ji=function(n,t){for(var r=n,o;(o=r.next)!==null;r=o)if(o.key===t)return r.next=o.next,o.next=n.next,n.next=o,o},Lh=function(n,t){var r=Ji(n,t);return r&&r.value},Mh=function(n,t,r){var o=Ji(n,t);o?o.value=r:n.next={key:t,next:n.next,value:r}},Fh=function(n,t){return!!Ji(n,t)},Bh=function(){var t,r,o,a={assert:function(l){if(!a.has(l))throw new Ph("Side channel does not contain "+Th(l))},get:function(l){if(rr&&l&&(typeof l=="object"||typeof l=="function")){if(t)return Rh(t,l)}else if(ir){if(r)return Dh(r,l)}else if(o)return Lh(o,l)},has:function(l){if(rr&&l&&(typeof l=="object"||typeof l=="function")){if(t)return $h(t,l)}else if(ir){if(r)return Ih(r,l)}else if(o)return Fh(o,l);return!1},set:function(l,u){rr&&l&&(typeof l=="object"||typeof l=="function")?(t||(t=new rr),kh(t,l,u)):ir?(r||(r=new ir),Nh(r,l,u)):(o||(o={key:{},next:null}),Mh(o,l,u))}};return a},jh=String.prototype.replace,Uh=/%20/g,vi={RFC1738:"RFC1738",RFC3986:"RFC3986"},Yi={default:vi.RFC3986,formatters:{RFC1738:function(n){return jh.call(n,Uh,"+")},RFC3986:function(n){return String(n)}},RFC1738:vi.RFC1738,RFC3986:vi.RFC3986},Hh=Yi,_i=Object.prototype.hasOwnProperty,It=Array.isArray,it=function(){for(var n=[],t=0;t<256;++t)n.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return n}(),qh=function(t){for(;t.length>1;){var r=t.pop(),o=r.obj[r.prop];if(It(o)){for(var a=[],l=0;l<o.length;++l)typeof o[l]<"u"&&a.push(o[l]);r.obj[r.prop]=a}}},wl=function(t,r){for(var o=r&&r.plainObjects?Object.create(null):{},a=0;a<t.length;++a)typeof t[a]<"u"&&(o[a]=t[a]);return o},Wh=function n(t,r,o){if(!r)return t;if(typeof r!="object"){if(It(t))t.push(r);else if(t&&typeof t=="object")(o&&(o.plainObjects||o.allowPrototypes)||!_i.call(Object.prototype,r))&&(t[r]=!0);else return[t,r];return t}if(!t||typeof t!="object")return[t].concat(r);var a=t;return It(t)&&!It(r)&&(a=wl(t,o)),It(t)&&It(r)?(r.forEach(function(l,u){if(_i.call(t,u)){var f=t[u];f&&typeof f=="object"&&l&&typeof l=="object"?t[u]=n(f,l,o):t.push(l)}else t[u]=l}),t):Object.keys(r).reduce(function(l,u){var f=r[u];return _i.call(l,u)?l[u]=n(l[u],f,o):l[u]=f,l},a)},zh=function(t,r){return Object.keys(r).reduce(function(o,a){return o[a]=r[a],o},t)},Vh=function(n,t,r){var o=n.replace(/\+/g," ");if(r==="iso-8859-1")return o.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(o)}catch{return o}},Gh=function(t,r,o,a,l){if(t.length===0)return t;var u=t;if(typeof t=="symbol"?u=Symbol.prototype.toString.call(t):typeof t!="string"&&(u=String(t)),o==="iso-8859-1")return escape(u).replace(/%u[0-9a-f]{4}/gi,function(h){return"%26%23"+parseInt(h.slice(2),16)+"%3B"});for(var f="",d=0;d<u.length;++d){var p=u.charCodeAt(d);if(p===45||p===46||p===95||p===126||p>=48&&p<=57||p>=65&&p<=90||p>=97&&p<=122||l===Hh.RFC1738&&(p===40||p===41)){f+=u.charAt(d);continue}if(p<128){f=f+it[p];continue}if(p<2048){f=f+(it[192|p>>6]+it[128|p&63]);continue}if(p<55296||p>=57344){f=f+(it[224|p>>12]+it[128|p>>6&63]+it[128|p&63]);continue}d+=1,p=65536+((p&1023)<<10|u.charCodeAt(d)&1023),f+=it[240|p>>18]+it[128|p>>12&63]+it[128|p>>6&63]+it[128|p&63]}return f},Qh=function(t){for(var r=[{obj:{o:t},prop:"o"}],o=[],a=0;a<r.length;++a)for(var l=r[a],u=l.obj[l.prop],f=Object.keys(u),d=0;d<f.length;++d){var p=f[d],h=u[p];typeof h=="object"&&h!==null&&o.indexOf(h)===-1&&(r.push({obj:u,prop:p}),o.push(h))}return qh(r),t},Kh=function(t){return Object.prototype.toString.call(t)==="[object RegExp]"},Xh=function(t){return!t||typeof t!="object"?!1:!!(t.constructor&&t.constructor.isBuffer&&t.constructor.isBuffer(t))},Jh=function(t,r){return[].concat(t,r)},Yh=function(t,r){if(It(t)){for(var o=[],a=0;a<t.length;a+=1)o.push(r(t[a]));return o}return r(t)},El={arrayToObject:wl,assign:zh,combine:Jh,compact:Qh,decode:Vh,encode:Gh,isBuffer:Xh,isRegExp:Kh,maybeMap:Yh,merge:Wh},Al=Bh,ki=El,Rn=Yi,Zh=Object.prototype.hasOwnProperty,Pa={brackets:function(t){return t+"[]"},comma:"comma",indices:function(t,r){return t+"["+r+"]"},repeat:function(t){return t}},pt=Array.isArray,em=String.prototype.split,tm=Array.prototype.push,Sl=function(n,t){tm.apply(n,pt(t)?t:[t])},nm=Date.prototype.toISOString,Ra=Rn.default,Se={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:ki.encode,encodeValuesOnly:!1,format:Ra,formatter:Rn.formatters[Ra],indices:!1,serializeDate:function(t){return nm.call(t)},skipNulls:!1,strictNullHandling:!1},rm=function(t){return typeof t=="string"||typeof t=="number"||typeof t=="boolean"||typeof t=="symbol"||typeof t=="bigint"},bi={},im=function n(t,r,o,a,l,u,f,d,p,h,v,g,S,P,M,I){for(var O=t,$=I,K=0,se=!1;($=$.get(bi))!==void 0&&!se;){var D=$.get(t);if(K+=1,typeof D<"u"){if(D===K)throw new RangeError("Cyclic object value");se=!0}typeof $.get(bi)>"u"&&(K=0)}if(typeof d=="function"?O=d(r,O):O instanceof Date?O=v(O):o==="comma"&&pt(O)&&(O=ki.maybeMap(O,function(mt){return mt instanceof Date?v(mt):mt})),O===null){if(l)return f&&!P?f(r,Se.encoder,M,"key",g):r;O=""}if(rm(O)||ki.isBuffer(O)){if(f){var he=P?r:f(r,Se.encoder,M,"key",g);if(o==="comma"&&P){for(var Ee=em.call(String(O),","),Te="",Ae=0;Ae<Ee.length;++Ae)Te+=(Ae===0?"":",")+S(f(Ee[Ae],Se.encoder,M,"value",g));return[S(he)+(a&&pt(O)&&Ee.length===1?"[]":"")+"="+Te]}return[S(he)+"="+S(f(O,Se.encoder,M,"value",g))]}return[S(r)+"="+S(String(O))]}var Pe=[];if(typeof O>"u")return Pe;var Ce;if(o==="comma"&&pt(O))Ce=[{value:O.length>0?O.join(",")||null:void 0}];else if(pt(d))Ce=d;else{var le=Object.keys(O);Ce=p?le.sort(p):le}for(var ie=a&&pt(O)&&O.length===1?r+"[]":r,fe=0;fe<Ce.length;++fe){var ge=Ce[fe],Re=typeof ge=="object"&&typeof ge.value<"u"?ge.value:O[ge];if(!(u&&Re===null)){var Ze=pt(O)?typeof o=="function"?o(ie,ge):ie:ie+(h?"."+ge:"["+ge+"]");I.set(t,K);var ht=Al();ht.set(bi,I),Sl(Pe,n(Re,Ze,o,a,l,u,f,d,p,h,v,g,S,P,M,ht))}}return Pe},om=function(t){if(!t)return Se;if(t.encoder!==null&&typeof t.encoder<"u"&&typeof t.encoder!="function")throw new TypeError("Encoder has to be a function.");var r=t.charset||Se.charset;if(typeof t.charset<"u"&&t.charset!=="utf-8"&&t.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var o=Rn.default;if(typeof t.format<"u"){if(!Zh.call(Rn.formatters,t.format))throw new TypeError("Unknown format option provided.");o=t.format}var a=Rn.formatters[o],l=Se.filter;return(typeof t.filter=="function"||pt(t.filter))&&(l=t.filter),{addQueryPrefix:typeof t.addQueryPrefix=="boolean"?t.addQueryPrefix:Se.addQueryPrefix,allowDots:typeof t.allowDots>"u"?Se.allowDots:!!t.allowDots,charset:r,charsetSentinel:typeof t.charsetSentinel=="boolean"?t.charsetSentinel:Se.charsetSentinel,delimiter:typeof t.delimiter>"u"?Se.delimiter:t.delimiter,encode:typeof t.encode=="boolean"?t.encode:Se.encode,encoder:typeof t.encoder=="function"?t.encoder:Se.encoder,encodeValuesOnly:typeof t.encodeValuesOnly=="boolean"?t.encodeValuesOnly:Se.encodeValuesOnly,filter:l,format:o,formatter:a,serializeDate:typeof t.serializeDate=="function"?t.serializeDate:Se.serializeDate,skipNulls:typeof t.skipNulls=="boolean"?t.skipNulls:Se.skipNulls,sort:typeof t.sort=="function"?t.sort:null,strictNullHandling:typeof t.strictNullHandling=="boolean"?t.strictNullHandling:Se.strictNullHandling}},sm=function(n,t){var r=n,o=om(t),a,l;typeof o.filter=="function"?(l=o.filter,r=l("",r)):pt(o.filter)&&(l=o.filter,a=l);var u=[];if(typeof r!="object"||r===null)return"";var f;t&&t.arrayFormat in Pa?f=t.arrayFormat:t&&"indices"in t?f=t.indices?"indices":"repeat":f="indices";var d=Pa[f];if(t&&"commaRoundTrip"in t&&typeof t.commaRoundTrip!="boolean")throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var p=d==="comma"&&t&&t.commaRoundTrip;a||(a=Object.keys(r)),o.sort&&a.sort(o.sort);for(var h=Al(),v=0;v<a.length;++v){var g=a[v];o.skipNulls&&r[g]===null||Sl(u,im(r[g],g,d,p,o.strictNullHandling,o.skipNulls,o.encode?o.encoder:null,o.filter,o.sort,o.allowDots,o.serializeDate,o.format,o.formatter,o.encodeValuesOnly,o.charset,h))}var S=u.join(o.delimiter),P=o.addQueryPrefix===!0?"?":"";return o.charsetSentinel&&(o.charset==="iso-8859-1"?P+="utf8=%26%2310003%3B&":P+="utf8=%E2%9C%93&"),S.length>0?P+S:""},dn=El,$i=Object.prototype.hasOwnProperty,am=Array.isArray,_e={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:dn.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},lm=function(n){return n.replace(/&#(\d+);/g,function(t,r){return String.fromCharCode(parseInt(r,10))})},Ol=function(n,t){return n&&typeof n=="string"&&t.comma&&n.indexOf(",")>-1?n.split(","):n},cm="utf8=%26%2310003%3B",um="utf8=%E2%9C%93",fm=function(t,r){var o={},a=r.ignoreQueryPrefix?t.replace(/^\?/,""):t,l=r.parameterLimit===1/0?void 0:r.parameterLimit,u=a.split(r.delimiter,l),f=-1,d,p=r.charset;if(r.charsetSentinel)for(d=0;d<u.length;++d)u[d].indexOf("utf8=")===0&&(u[d]===um?p="utf-8":u[d]===cm&&(p="iso-8859-1"),f=d,d=u.length);for(d=0;d<u.length;++d)if(d!==f){var h=u[d],v=h.indexOf("]="),g=v===-1?h.indexOf("="):v+1,S,P;g===-1?(S=r.decoder(h,_e.decoder,p,"key"),P=r.strictNullHandling?null:""):(S=r.decoder(h.slice(0,g),_e.decoder,p,"key"),P=dn.maybeMap(Ol(h.slice(g+1),r),function(M){return r.decoder(M,_e.decoder,p,"value")})),P&&r.interpretNumericEntities&&p==="iso-8859-1"&&(P=lm(P)),h.indexOf("[]=")>-1&&(P=am(P)?[P]:P),$i.call(o,S)?o[S]=dn.combine(o[S],P):o[S]=P}return o},dm=function(n,t,r,o){for(var a=o?t:Ol(t,r),l=n.length-1;l>=0;--l){var u,f=n[l];if(f==="[]"&&r.parseArrays)u=[].concat(a);else{u=r.plainObjects?Object.create(null):{};var d=f.charAt(0)==="["&&f.charAt(f.length-1)==="]"?f.slice(1,-1):f,p=parseInt(d,10);!r.parseArrays&&d===""?u={0:a}:!isNaN(p)&&f!==d&&String(p)===d&&p>=0&&r.parseArrays&&p<=r.arrayLimit?(u=[],u[p]=a):d!=="__proto__"&&(u[d]=a)}a=u}return a},pm=function(t,r,o,a){if(t){var l=o.allowDots?t.replace(/\.([^.[]+)/g,"[$1]"):t,u=/(\[[^[\]]*])/,f=/(\[[^[\]]*])/g,d=o.depth>0&&u.exec(l),p=d?l.slice(0,d.index):l,h=[];if(p){if(!o.plainObjects&&$i.call(Object.prototype,p)&&!o.allowPrototypes)return;h.push(p)}for(var v=0;o.depth>0&&(d=f.exec(l))!==null&&v<o.depth;){if(v+=1,!o.plainObjects&&$i.call(Object.prototype,d[1].slice(1,-1))&&!o.allowPrototypes)return;h.push(d[1])}return d&&h.push("["+l.slice(d.index)+"]"),dm(h,r,o,a)}},hm=function(t){if(!t)return _e;if(t.decoder!==null&&t.decoder!==void 0&&typeof t.decoder!="function")throw new TypeError("Decoder has to be a function.");if(typeof t.charset<"u"&&t.charset!=="utf-8"&&t.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var r=typeof t.charset>"u"?_e.charset:t.charset;return{allowDots:typeof t.allowDots>"u"?_e.allowDots:!!t.allowDots,allowPrototypes:typeof t.allowPrototypes=="boolean"?t.allowPrototypes:_e.allowPrototypes,allowSparse:typeof t.allowSparse=="boolean"?t.allowSparse:_e.allowSparse,arrayLimit:typeof t.arrayLimit=="number"?t.arrayLimit:_e.arrayLimit,charset:r,charsetSentinel:typeof t.charsetSentinel=="boolean"?t.charsetSentinel:_e.charsetSentinel,comma:typeof t.comma=="boolean"?t.comma:_e.comma,decoder:typeof t.decoder=="function"?t.decoder:_e.decoder,delimiter:typeof t.delimiter=="string"||dn.isRegExp(t.delimiter)?t.delimiter:_e.delimiter,depth:typeof t.depth=="number"||t.depth===!1?+t.depth:_e.depth,ignoreQueryPrefix:t.ignoreQueryPrefix===!0,interpretNumericEntities:typeof t.interpretNumericEntities=="boolean"?t.interpretNumericEntities:_e.interpretNumericEntities,parameterLimit:typeof t.parameterLimit=="number"?t.parameterLimit:_e.parameterLimit,parseArrays:t.parseArrays!==!1,plainObjects:typeof t.plainObjects=="boolean"?t.plainObjects:_e.plainObjects,strictNullHandling:typeof t.strictNullHandling=="boolean"?t.strictNullHandling:_e.strictNullHandling}},mm=function(n,t){var r=hm(t);if(n===""||n===null||typeof n>"u")return r.plainObjects?Object.create(null):{};for(var o=typeof n=="string"?fm(n,r):n,a=r.plainObjects?Object.create(null):{},l=Object.keys(o),u=0;u<l.length;++u){var f=l[u],d=pm(f,o[f],r,typeof n=="string");a=dn.merge(a,d,r)}return r.allowSparse===!0?a:dn.compact(a)},gm=sm,ym=mm,vm=Yi,_m={formats:vm,parse:ym,stringify:gm};const bm=Ma(_m),ka="select (count(*) as ?count) {?s ?p ?o}",$a="select ?g (count(*) as ?count) {graph ?g {?s ?p ?o}} group by ?g";class wm{constructor(t){this.isOffline=!0,this.pathname=t.pathname}getFusekiUrl(t){let r=t;for(;r.startsWith("/")&&r.length>0;)r=r.slice(1);return`${this.pathname.endsWith("/")?this.pathname:`${this.pathname}/`}${r}`}async getServerData(){return(await He.get(this.getFusekiUrl("/$/server"))).data}async getServerStatus(){const t=new Date().getTime();try{return await He.get(this.getFusekiUrl("/$/ping")),this.isOffline&&$n.emit("connection:reset"),this.isOffline=!1,new Cs(!0,`Last ping returned OK in ${this._duration(t)}ms`)}catch(r){return this.isOffline=!0,new Cs(!1,`Last ping returned "${r}" in ${this._duration(t)}ms`)}}_duration(t){return new Date().getTime()-t}async getDatasetStats(t){return(await He.get(this.getFusekiUrl(`/$/stats/${t}`))).data}async getDatasetSize(t,r){const o=await Promise.all([He.get(this.getFusekiUrl(`/${t}/${r}`),{params:{query:ka}}),He.get(this.getFusekiUrl(`/${t}/${r}`),{params:{query:$a}})]),a={},l=o[0];return a["default graph"]=l.data.results.bindings[0].count.value,o[1].data.results.bindings.forEach(f=>{a[f.g.value]=f.count.value}),a}async deleteDataset(t){await He.delete(this.getFusekiUrl(`/$/datasets${t}`))}async backupDataset(t){return await He.post(this.getFusekiUrl(`/$/backup${t}`))}async createDataset(t,r){const o=bm.stringify({dbName:t,dbType:r}),a={"Content-Type":"application/x-www-form-urlencoded"};try{await He.post(this.getFusekiUrl("/$/datasets"),o,{headers:a})}catch(l){throw l.response&&l.response.status!==200?l.response.status===409?new Error(`failed to create dataset "${t}", reason: there is another dataset with the same name`):new Error(`failed to create dataset "${t}" with type ${r}, reason: HTTP status: "${l.response.status}", message: ${l.response.statusText}`):l}}async getTasks(){return He.get(this.getFusekiUrl("/$/tasks"))}async countGraphsTriples(t,r){const o=await Promise.all([He.get(this.getFusekiUrl(`/${t}/${r}`),{params:{query:ka}}),He.get(this.getFusekiUrl(`/${t}/${r}`),{params:{query:$a}})]),a={},l=o[0];return a.default=l.data.results.bindings[0].count.value,o[1].data.results.bindings.forEach(f=>{a[f.g.value]=f.count.value}),a}getDataEndpoint(t){return t.find(r=>r!=="")||""}async fetchGraph(t,r,o){const a=this.getDataEndpoint(r),l=`${t}/${a}`;return await He.get(this.getFusekiUrl(l),{params:{graph:o},headers:{Accept:"text/turtle; charset=utf-8"}})}async saveGraph(t,r,o,a){const l=this.getDataEndpoint(r),u=`${t}/${l}`;return await He.put(this.getFusekiUrl(u),a,{params:{graph:o},headers:{Accept:"application/json, text/javascript, */*; q=0.01","Content-Type":"text/turtle; charset=UTF-8"}}).catch(f=>{throw new Error(f.response.data)})}}const Em={install(n){n.config.globalProperties.$fusekiService=new wm(window.location)}},vr=Yc(Su);vr.use(od);vr.use(Em);vr.use(md);vr.mount("#app");


//# sourceMappingURL=data:application/json;base64,