/**
 * Generated by @openapi-codegen
 *
 * @version v0
 */
import * as reactQuery from '@tanstack/react-query';
import { useApiContext, ApiContext } from './apiContext';
import type * as Fetcher from './apiFetcher';
import { apiFetch } from './apiFetcher';
import type * as Schemas from './apiSchemas';

export type ListPatientsError = Fetcher.ErrorWrapper<undefined>;

export type ListPatientsResponse = Schemas.PatientResponseDTO[];

export type ListPatientsVariables = ApiContext['fetcherOptions'];

export const fetchListPatients = (
  variables: ListPatientsVariables,
  signal?: AbortSignal
) =>
  apiFetch<ListPatientsResponse, ListPatientsError, undefined, {}, {}, {}>({
    url: '/patients/list',
    method: 'get',
    ...variables,
    signal
  });

export const useListPatients = <TData = ListPatientsResponse>(
  variables: ListPatientsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ListPatientsResponse, ListPatientsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<ListPatientsResponse, ListPatientsError, TData>({
    queryKey: queryKeyFn({
      path: '/patients/list',
      operationId: 'listPatients',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchListPatients({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  });
};

export type ListEtablissementError = Fetcher.ErrorWrapper<undefined>;

export type ListEtablissementResponse = Schemas.EtablissementDeSanteDTO[];

export type ListEtablissementVariables = ApiContext['fetcherOptions'];

export const fetchListEtablissement = (
  variables: ListEtablissementVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    ListEtablissementResponse,
    ListEtablissementError,
    undefined,
    {},
    {},
    {}
  >({ url: '/etablissement/list', method: 'get', ...variables, signal });

export const useListEtablissement = <TData = ListEtablissementResponse>(
  variables: ListEtablissementVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListEtablissementResponse,
      ListEtablissementError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    ListEtablissementResponse,
    ListEtablissementError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/etablissement/list',
      operationId: 'listEtablissement',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchListEtablissement({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  });
};

export type QueryOperation =
  | {
      path: '/patients/list';
      operationId: 'listPatients';
      variables: ListPatientsVariables;
    }
  | {
      path: '/etablissement/list';
      operationId: 'listEtablissement';
      variables: ListEtablissementVariables;
    };
