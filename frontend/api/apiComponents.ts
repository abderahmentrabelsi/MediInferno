/**
 * Generated by @openapi-codegen
 *
 * @version v0
 */
import * as reactQuery from '@tanstack/react-query';
import { useApiContext, ApiContext } from './apiContext';
import type * as Fetcher from './apiFetcher';
import { apiFetch } from './apiFetcher';
import type * as Schemas from './apiSchemas';

export type GetVehicleStatsError = Fetcher.ErrorWrapper<undefined>;

export type GetVehicleStatsVariables = ApiContext['fetcherOptions'];

export const fetchGetVehicleStats = (
  variables: GetVehicleStatsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.VehicleStatsDTO,
    GetVehicleStatsError,
    undefined,
    {},
    {},
    {}
  >({ url: '/vehic/stats', method: 'get', ...variables, signal });

export const useGetVehicleStats = <TData = Schemas.VehicleStatsDTO>(
  variables: GetVehicleStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.VehicleStatsDTO,
      GetVehicleStatsError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.VehicleStatsDTO,
    GetVehicleStatsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/vehic/stats',
      operationId: 'getVehicleStats',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchGetVehicleStats({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  });
};

export type GetAllVehiclesError = Fetcher.ErrorWrapper<undefined>;

export type GetAllVehiclesResponse = Schemas.VehicleResponseDTO[];

export type GetAllVehiclesVariables = ApiContext['fetcherOptions'];

export const fetchGetAllVehicles = (
  variables: GetAllVehiclesVariables,
  signal?: AbortSignal
) =>
  apiFetch<GetAllVehiclesResponse, GetAllVehiclesError, undefined, {}, {}, {}>({
    url: '/vehic/all',
    method: 'get',
    ...variables,
    signal
  });

export const useGetAllVehicles = <TData = GetAllVehiclesResponse>(
  variables: GetAllVehiclesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetAllVehiclesResponse,
      GetAllVehiclesError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetAllVehiclesResponse,
    GetAllVehiclesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/vehic/all',
      operationId: 'getAllVehicles',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchGetAllVehicles({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  });
};

export type GetSpecialiteStatsError = Fetcher.ErrorWrapper<undefined>;

export type GetSpecialiteStatsVariables = ApiContext['fetcherOptions'];

export const fetchGetSpecialiteStats = (
  variables: GetSpecialiteStatsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SpecialiteStatsResponseDTO,
    GetSpecialiteStatsError,
    undefined,
    {},
    {},
    {}
  >({ url: '/specialite/stats', method: 'get', ...variables, signal });

export const useGetSpecialiteStats = <
  TData = Schemas.SpecialiteStatsResponseDTO
>(
  variables: GetSpecialiteStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SpecialiteStatsResponseDTO,
      GetSpecialiteStatsError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.SpecialiteStatsResponseDTO,
    GetSpecialiteStatsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/specialite/stats',
      operationId: 'getSpecialiteStats',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchGetSpecialiteStats({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  });
};

export type ListSpecialiteQueryParams = {
  q?: string;
};

export type ListSpecialiteError = Fetcher.ErrorWrapper<undefined>;

export type ListSpecialiteResponse = Schemas.SpecialiteResponseDTO[];

export type ListSpecialiteVariables = {
  queryParams?: ListSpecialiteQueryParams;
} & ApiContext['fetcherOptions'];

export const fetchListSpecialite = (
  variables: ListSpecialiteVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    ListSpecialiteResponse,
    ListSpecialiteError,
    undefined,
    {},
    ListSpecialiteQueryParams,
    {}
  >({ url: '/specialite/list', method: 'get', ...variables, signal });

export const useListSpecialite = <TData = ListSpecialiteResponse>(
  variables: ListSpecialiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListSpecialiteResponse,
      ListSpecialiteError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    ListSpecialiteResponse,
    ListSpecialiteError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/specialite/list',
      operationId: 'listSpecialite',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchListSpecialite({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  });
};

export type GetPatientStatsError = Fetcher.ErrorWrapper<undefined>;

export type GetPatientStatsVariables = ApiContext['fetcherOptions'];

export const fetchGetPatientStats = (
  variables: GetPatientStatsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.PatientStatsDTO,
    GetPatientStatsError,
    undefined,
    {},
    {},
    {}
  >({ url: '/patients/stats', method: 'get', ...variables, signal });

export const useGetPatientStats = <TData = Schemas.PatientStatsDTO>(
  variables: GetPatientStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PatientStatsDTO,
      GetPatientStatsError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.PatientStatsDTO,
    GetPatientStatsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/patients/stats',
      operationId: 'getPatientStats',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchGetPatientStats({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  });
};

export type ListPatientsQueryParams = {
  q?: string;
};

export type ListPatientsError = Fetcher.ErrorWrapper<undefined>;

export type ListPatientsResponse = Schemas.PatientResponseDTO[];

export type ListPatientsVariables = {
  queryParams?: ListPatientsQueryParams;
} & ApiContext['fetcherOptions'];

export const fetchListPatients = (
  variables: ListPatientsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    ListPatientsResponse,
    ListPatientsError,
    undefined,
    {},
    ListPatientsQueryParams,
    {}
  >({ url: '/patients/list', method: 'get', ...variables, signal });

export const useListPatients = <TData = ListPatientsResponse>(
  variables: ListPatientsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ListPatientsResponse, ListPatientsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<ListPatientsResponse, ListPatientsError, TData>({
    queryKey: queryKeyFn({
      path: '/patients/list',
      operationId: 'listPatients',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchListPatients({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  });
};

export type GetEtablissementStatsError = Fetcher.ErrorWrapper<undefined>;

export type GetEtablissementStatsVariables = ApiContext['fetcherOptions'];

export const fetchGetEtablissementStats = (
  variables: GetEtablissementStatsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.EtablissementStatsDTO,
    GetEtablissementStatsError,
    undefined,
    {},
    {},
    {}
  >({ url: '/etablissement/stats', method: 'get', ...variables, signal });

export const useGetEtablissementStats = <TData = Schemas.EtablissementStatsDTO>(
  variables: GetEtablissementStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.EtablissementStatsDTO,
      GetEtablissementStatsError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.EtablissementStatsDTO,
    GetEtablissementStatsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/etablissement/stats',
      operationId: 'getEtablissementStats',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchGetEtablissementStats({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  });
};

export type GetEtablissementReductionStatsError =
  Fetcher.ErrorWrapper<undefined>;

export type GetEtablissementReductionStatsVariables =
  ApiContext['fetcherOptions'];

export const fetchGetEtablissementReductionStats = (
  variables: GetEtablissementReductionStatsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.EtablissementReductionStatsDTO,
    GetEtablissementReductionStatsError,
    undefined,
    {},
    {},
    {}
  >({
    url: '/etablissement/reductionStats',
    method: 'get',
    ...variables,
    signal
  });

export const useGetEtablissementReductionStats = <
  TData = Schemas.EtablissementReductionStatsDTO
>(
  variables: GetEtablissementReductionStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.EtablissementReductionStatsDTO,
      GetEtablissementReductionStatsError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.EtablissementReductionStatsDTO,
    GetEtablissementReductionStatsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/etablissement/reductionStats',
      operationId: 'getEtablissementReductionStats',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchGetEtablissementReductionStats(
        { ...fetcherOptions, ...variables },
        signal
      ),
    ...options,
    ...queryOptions
  });
};

export type ListEtablissementQueryParams = {
  q?: string;
};

export type ListEtablissementError = Fetcher.ErrorWrapper<undefined>;

export type ListEtablissementResponse = Schemas.EtablissementDeSanteDTO[];

export type ListEtablissementVariables = {
  queryParams?: ListEtablissementQueryParams;
} & ApiContext['fetcherOptions'];

export const fetchListEtablissement = (
  variables: ListEtablissementVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    ListEtablissementResponse,
    ListEtablissementError,
    undefined,
    {},
    ListEtablissementQueryParams,
    {}
  >({ url: '/etablissement/list', method: 'get', ...variables, signal });

export const useListEtablissement = <TData = ListEtablissementResponse>(
  variables: ListEtablissementVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListEtablissementResponse,
      ListEtablissementError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    ListEtablissementResponse,
    ListEtablissementError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/etablissement/list',
      operationId: 'listEtablissement',
      variables
    }),
    queryFn: ({ signal }) =>
      fetchListEtablissement({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  });
};

export type QueryOperation =
  | {
      path: '/vehic/stats';
      operationId: 'getVehicleStats';
      variables: GetVehicleStatsVariables;
    }
  | {
      path: '/vehic/all';
      operationId: 'getAllVehicles';
      variables: GetAllVehiclesVariables;
    }
  | {
      path: '/specialite/stats';
      operationId: 'getSpecialiteStats';
      variables: GetSpecialiteStatsVariables;
    }
  | {
      path: '/specialite/list';
      operationId: 'listSpecialite';
      variables: ListSpecialiteVariables;
    }
  | {
      path: '/patients/stats';
      operationId: 'getPatientStats';
      variables: GetPatientStatsVariables;
    }
  | {
      path: '/patients/list';
      operationId: 'listPatients';
      variables: ListPatientsVariables;
    }
  | {
      path: '/etablissement/stats';
      operationId: 'getEtablissementStats';
      variables: GetEtablissementStatsVariables;
    }
  | {
      path: '/etablissement/reductionStats';
      operationId: 'getEtablissementReductionStats';
      variables: GetEtablissementReductionStatsVariables;
    }
  | {
      path: '/etablissement/list';
      operationId: 'listEtablissement';
      variables: ListEtablissementVariables;
    };
